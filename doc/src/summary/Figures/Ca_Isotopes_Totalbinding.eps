%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Ca_Isotopes_Totalbinding.pdf
%%Creator: Adobe Acrobat 9.5.2
%%For: witek
%%CreationDate: 12/7/12, 8:46 PM
%%BoundingBox: 0 0 541 429
%%HiResBoundingBox: 0 0 541 429
%%CropBox: 0 0 541 429
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 27231 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:56:37        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2012-05-25T12:54:43-04:00"
   xmp:CreatorTool="Grace-5.1.22"
   xmp:ModifyDate="2012-12-07T16:13:04-05:00"
   xmp:MetadataDate="2012-12-07T16:13:04-05:00"
   pdf:Producer="PDFlib Lite 7.0.5 (Linux-x86_64)"
   dc:format="application/pdf"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   xmpMM:RenditionClass="proof:pdf"
   xmpMM:DocumentID="uuid:5e517027-4948-4545-be71-c244f87092de"
   xmpMM:InstanceID="uuid:31f5e98e-a975-1045-a9e6-babc2a043a4c">
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="240"
      xmpGImg:height="256"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADwAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;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&#xA;96fZ2xVkOKuxV2KuxV2KuxV//9k="/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>gw5</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Ca_Isotopes_Totalbinding_New.agr</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmpTPg:MaxPageSize
    stDim:w="541.000000"
    stDim:h="429.000000"
    stDim:unit="Points"/>
   <xmpTPg:Fonts>
    <rdf:Bag>
     <rdf:li
      stFnt:fontName="MyriadPro-Regular"
      stFnt:fontFamily="Myriad Pro"
      stFnt:fontFace="Regular"
      stFnt:fontType="Open Type"
      stFnt:versionString="Version 2.062;PS 2.000;hotconv 1.0.57;makeotf.lib2.0.21895"
      stFnt:composite="False"
      stFnt:fontFileName="MyriadPro-Regular.otf"/>
     <rdf:li
      stFnt:fontName="Times-Roman"
      stFnt:fontFamily="Times"
      stFnt:fontFace="Regular"
      stFnt:fontType="TrueType"
      stFnt:versionString="3.5a3"
      stFnt:composite="False"
      stFnt:fontFileName="Times"/>
    </rdf:Bag>
   </xmpTPg:Fonts>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -429 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 429 li
541 429 li
541 0 li
cp
clp
[1 0 0 1 0 0 ]ct
2.264 lw
0 lc
0 lj
10 ml
[2.264 6.854 11.444 6.854 ] 0 dsh
true sadj
117.424 105.681 mo
145.086 122.389 li
172.749 138.729 li
200.411 149.99 li
228.073 168.901 li
255.737 173.858 li
283.399 187.016 li
311.061 195.828 li
338.723 203.661 li
421.71 182.915 li
449.373 193.135 li
477.035 192.829 li
504.697 192.524 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 0 0 rgb
@
113.507 109.597 mo
113.507 101.825 li
121.34 101.825 li
121.34 109.597 li
f
.918 lw
[] 0 dsh
113.507 101.825 mo
121.34 101.825 li
121.34 109.597 li
113.507 109.597 li
cp
@
141.169 126.305 mo
141.169 118.472 li
149.002 118.472 li
149.002 126.305 li
f
141.169 118.471 mo
149.002 118.471 li
149.002 126.304 li
141.169 126.304 li
cp
@
168.832 142.646 mo
168.832 134.812 li
176.666 134.812 li
176.666 142.646 li
f
168.832 134.812 mo
176.666 134.812 li
176.666 142.646 li
168.832 142.646 li
cp
@
196.494 153.906 mo
196.494 146.072 li
204.328 146.072 li
204.328 153.906 li
f
196.494 146.072 mo
204.328 146.072 li
204.328 153.906 li
196.494 153.906 li
cp
@
224.157 172.816 mo
224.157 164.983 li
231.99 164.983 li
231.99 172.816 li
f
224.157 164.983 mo
231.99 164.983 li
231.99 172.816 li
224.157 172.816 li
cp
@
251.819 177.774 mo
251.819 169.94 li
259.652 169.94 li
259.652 177.774 li
f
251.819 169.94 mo
259.652 169.94 li
259.652 177.774 li
251.819 177.774 li
cp
@
279.481 190.932 mo
279.481 183.16 li
287.315 183.16 li
287.315 190.932 li
f
279.481 183.159 mo
287.315 183.159 li
287.315 190.931 li
279.481 190.931 li
cp
@
307.144 199.745 mo
307.144 191.911 li
314.978 191.911 li
314.978 199.745 li
f
307.144 191.911 mo
314.978 191.911 li
314.978 199.745 li
307.144 199.745 li
cp
@
334.807 207.578 mo
334.807 199.745 li
342.64 199.745 li
342.64 207.578 li
f
334.807 199.745 mo
342.64 199.745 li
342.64 207.578 li
334.807 207.578 li
cp
@
417.794 186.77 mo
417.794 178.999 li
425.627 178.999 li
425.627 186.77 li
f
417.794 178.998 mo
425.627 178.998 li
425.627 186.77 li
417.794 186.77 li
cp
@
445.456 197.052 mo
445.456 189.219 li
453.289 189.219 li
453.289 197.052 li
f
445.456 189.219 mo
453.289 189.219 li
453.289 197.052 li
445.456 197.052 li
cp
@
473.118 196.746 mo
473.118 188.912 li
480.952 188.912 li
480.952 196.746 li
f
473.118 188.912 mo
480.952 188.912 li
480.952 196.746 li
473.118 196.746 li
cp
@
500.781 196.44 mo
500.781 188.668 li
508.614 188.668 li
508.614 196.44 li
f
500.781 188.668 mo
508.614 188.668 li
508.614 196.44 li
500.781 196.44 li
cp
@
2.264 lw
117.424 104.395 mo
145.086 119.206 li
172.749 137.382 li
200.411 151.274 li
228.073 168.41 li
0 0 0 rgb
@
gsave
0 0 mo
541 0 li
541 429 li
0 429 li
cp
clp
122.014 104.395 mo
122.014 101.886 119.933 99.805 117.424 99.805 cv
114.914 99.805 112.834 101.886 112.834 104.395 cv
112.834 106.966 114.914 108.985 117.424 108.985 cv
119.933 108.985 122.014 106.966 122.014 104.395 cv
f
.918 lw
122.014 104.395 mo
122.014 101.886 119.933 99.805 117.424 99.805 cv
114.914 99.805 112.834 101.886 112.834 104.395 cv
112.834 106.966 114.914 108.985 117.424 108.985 cv
119.933 108.985 122.014 106.966 122.014 104.395 cv
@
149.677 119.206 mo
149.677 116.636 147.596 114.616 145.086 114.616 cv
142.577 114.616 140.497 116.636 140.497 119.206 cv
140.497 121.715 142.577 123.796 145.086 123.796 cv
147.596 123.796 149.677 121.715 149.677 119.206 cv
f
149.677 119.206 mo
149.677 116.636 147.596 114.616 145.086 114.616 cv
142.577 114.616 140.497 116.636 140.497 119.206 cv
140.497 121.715 142.577 123.796 145.086 123.796 cv
147.596 123.796 149.677 121.715 149.677 119.206 cv
@
177.339 137.382 mo
177.339 134.873 175.258 132.792 172.749 132.792 cv
170.239 132.792 168.159 134.873 168.159 137.382 cv
168.159 139.892 170.239 141.972 172.749 141.972 cv
175.258 141.972 177.339 139.892 177.339 137.382 cv
f
177.339 137.382 mo
177.339 134.873 175.258 132.792 172.749 132.792 cv
170.239 132.792 168.159 134.873 168.159 137.382 cv
168.159 139.892 170.239 141.972 172.749 141.972 cv
175.258 141.972 177.339 139.892 177.339 137.382 cv
@
205.001 151.274 mo
205.001 148.704 202.92 146.684 200.411 146.684 cv
197.902 146.684 195.821 148.704 195.821 151.274 cv
195.821 153.783 197.902 155.864 200.411 155.864 cv
202.92 155.864 205.001 153.783 205.001 151.274 cv
f
205.001 151.274 mo
205.001 148.704 202.92 146.684 200.411 146.684 cv
197.902 146.684 195.821 148.704 195.821 151.274 cv
195.821 153.783 197.902 155.864 200.411 155.864 cv
202.92 155.864 205.001 153.783 205.001 151.274 cv
@
232.664 168.41 mo
232.664 165.84 230.583 163.82 228.073 163.82 cv
225.564 163.82 223.483 165.84 223.483 168.41 cv
223.483 170.92 225.564 173 228.073 173 cv
230.583 173 232.664 170.92 232.664 168.41 cv
f
232.664 168.41 mo
232.664 165.84 230.583 163.82 228.073 163.82 cv
225.564 163.82 223.483 165.84 223.483 168.41 cv
223.483 170.92 225.564 173 228.073 173 cv
230.583 173 232.664 170.92 232.664 168.41 cv
@
2.264 lw
[16.034 6.854 ] 0 dsh
117.424 156.17 mo
145.086 178.937 li
172.749 202.192 li
200.411 223.123 li
228.073 247.481 li
255.737 261.128 li
283.399 281.569 li
311.061 299.563 li
338.723 314.739 li
421.71 326.367 li
449.373 344.606 li
477.035 340.016 li
0 0 1 rgb
@
117.424 151.58 mo
112.834 156.17 li
117.424 160.761 li
122.014 156.17 li
f
.918 lw
[] 0 dsh
117.424 151.58 mo
112.834 156.17 li
117.424 160.761 li
122.014 156.17 li
117.424 151.58 li
cp
@
145.086 174.347 mo
140.497 178.937 li
145.086 183.527 li
149.677 178.937 li
f
145.086 174.347 mo
140.497 178.937 li
145.086 183.527 li
149.677 178.937 li
145.086 174.347 li
cp
@
172.749 197.602 mo
168.159 202.193 li
172.749 206.783 li
177.339 202.193 li
f
172.749 197.602 mo
168.159 202.193 li
172.749 206.783 li
177.339 202.193 li
172.749 197.602 li
cp
@
200.411 218.533 mo
195.821 223.123 li
200.411 227.713 li
205.001 223.123 li
f
200.411 218.533 mo
195.821 223.123 li
200.411 227.713 li
205.001 223.123 li
200.411 218.533 li
cp
@
228.073 242.891 mo
223.483 247.481 li
228.073 252.072 li
232.664 247.481 li
f
228.073 242.891 mo
223.483 247.481 li
228.073 252.072 li
232.664 247.481 li
228.073 242.891 li
cp
@
255.736 256.538 mo
251.146 261.128 li
255.736 265.719 li
260.326 261.128 li
f
255.736 256.538 mo
251.146 261.128 li
255.736 265.719 li
260.326 261.128 li
255.736 256.538 li
cp
@
283.398 276.979 mo
278.808 281.57 li
283.398 286.16 li
287.988 281.57 li
f
283.398 276.979 mo
278.808 281.57 li
283.398 286.16 li
287.988 281.57 li
283.398 276.979 li
cp
@
311.06 294.972 mo
306.47 299.563 li
311.06 304.153 li
315.65 299.563 li
f
311.06 294.972 mo
306.47 299.563 li
311.06 304.153 li
315.65 299.563 li
311.06 294.972 li
cp
@
338.723 310.149 mo
334.133 314.739 li
338.723 319.33 li
343.314 314.739 li
f
338.723 310.149 mo
334.133 314.739 li
338.723 319.33 li
343.314 314.739 li
338.723 310.149 li
cp
@
421.71 321.777 mo
417.12 326.367 li
421.71 330.958 li
426.301 326.367 li
f
421.71 321.777 mo
417.12 326.367 li
421.71 330.958 li
426.301 326.367 li
421.71 321.777 li
cp
@
449.373 340.016 mo
444.783 344.606 li
449.373 349.196 li
453.963 344.606 li
f
449.373 340.016 mo
444.783 344.606 li
449.373 349.196 li
453.963 344.606 li
449.373 340.016 li
cp
@
477.035 335.425 mo
472.445 340.016 li
477.035 344.606 li
481.625 340.016 li
f
477.035 335.425 mo
472.445 340.016 li
477.035 344.606 li
481.625 340.016 li
477.035 335.425 li
cp
@
2.754 lw
90.7998 373.92 mo
532.361 373.92 li
0 0 0 rgb
@
90.7998 12.3203 mo
532.361 12.3203 li
@
117.424 373.92 mo
117.424 361.68 li
@
117.424 12.3203 mo
117.424 24.5603 li
@
145.086 373.92 mo
145.086 361.68 li
@
145.086 12.3203 mo
145.086 24.5603 li
@
172.749 373.92 mo
172.749 361.68 li
@
172.749 12.3203 mo
172.749 24.5603 li
@
200.411 373.92 mo
200.411 361.68 li
@
200.411 12.3203 mo
200.411 24.5603 li
@
228.073 373.92 mo
228.073 361.68 li
@
228.073 12.3203 mo
228.073 24.5603 li
@
255.736 373.92 mo
255.736 361.68 li
@
255.736 12.3203 mo
255.736 24.5603 li
@
283.398 373.92 mo
283.398 361.68 li
@
283.398 12.3203 mo
283.398 24.5603 li
@
311.06 373.92 mo
311.06 361.68 li
@
311.06 12.3203 mo
311.06 24.5603 li
@
338.723 373.92 mo
338.723 361.68 li
@
338.723 12.3203 mo
338.723 24.5603 li
@
421.71 373.92 mo
421.71 361.68 li
@
421.71 12.3203 mo
421.71 24.5603 li
@
449.373 373.92 mo
449.373 361.68 li
@
449.373 12.3203 mo
449.373 24.5603 li
@
477.035 373.92 mo
477.035 361.68 li
@
477.035 12.3203 mo
477.035 24.5603 li
@
504.697 373.92 mo
504.697 361.68 li
@
504.697 12.3203 mo
504.697 24.5603 li
@
grestore
%ADOBeginSubsetFont: OMOBAA+Times-Roman Initial
ct_T42Dict begin
-0.164 -0.41 0.965 0.965
 256 array 0 1 255 {1 index exch /.notdef put} for  /OMOBAA+Times-Roman
Type42DictBegin
[<00010000000b000b000b000b637674209b3f3f0f000000bc0000041a6670
676d81f39ab9000004d8000002c4676c7966e411279f000064a4000027a2
68656164bef4c3f70000079c00000036686865610c680635000007d40000
0024686d74784ff24d49000007f8000006206c6f63610034238c00000e18
000006246d61787009bb02a30000143c000000206e616d65f23adc1b0000
145c0000498a707265707ec9268100005de8000006bb6764697200000000
000000000000000005740002054b001d054b0018039700130000ffe30000
ffed0000ffeafe420000054b001dfebdffd6031e000000b4000000b402fe
3f3c0026001c007d00980003007d00de00350017002800e3013e000300b4
00d000df004c005a00c4004a00ab0147008a004e0039006d013d002401d2
00360045009e00be00170079006f00d000460091002100b400baffc20017
003600ab00b800f60009001d003d0058005a008c0099ffc400a000e800f5
ffa1ffea0033008500b800d5ffe2002f0080008c0002001a00250045006a
0070012d0274ff87003e004e009800ba00de0116ff3e00150034003c0044
00670068006d006e0084009800bd00d500d7011c0000002d0030003d0046
0057008b0093009700b000c6011f017b019d0409ff68ff6a0056005a006a
006d009200c400d000e700f1011101bf01c7ff1cffb4ffff000200230038
0042006d0092009c009d00a100a200b400ba00c700c700e400ed01530157
03230334ff0dff32fffbffff000f001c0040004b005c006d006d007c0085
009800c500cb00cb00df011f01280136015501700180018a01c702420313
0407054eff82000000080026003d003d004f006e0073008b00900095009e
00a800ad00ad00c300d300e3010901230241028002f40311034004510576
ff7fffafffbeffcf00030005000e0039004b004b004c0074007800880089
0092009200b600c200d800df00f000fd010701100117011f01b401dd01eb
020002110229028002ca036f038a03af0400049c04dd053e0587fea6fee4
ff67ff95ffcbfff8000200020007002500280037003700380039003f0051
0053005900640068006b007d0098009900af00b100b900d000d500da00dd
00fd00fe011e013601370142015a017a01a301c401cc01f702020210021f
022902290287029f029f02c002cc02d5031a031d03280331035e0396039f
03a8049305640571059405b106eb0788fe63fe64fe76fe7cfebcff4bff97
ffacffc0000700210028002d003000480049004c0051005400560066007a
007c0085008a008c009900af00b300b500b500b600b900bb00bc00cc00d0
00e100f400f600fc00fd0109011001170118011f01300139013c013e0142
014301440149014b014f01540155015701580161016a017d017e0184019c
019c019d01a101a301b401b401b901bb01cb01d001d701d701e401ec01ec
01f7020502070218022302260240024b024b025702570261026302680269
026d028d028d02a602af02b402b80300033e03460361036103b003c003d5
03d703df03f9041a0474047b04c104cc04da04e404f204f6051005300555
055606180639067606a406b3076b07ad07da00b200d500ae00bb00000000
000000000000000000630079029602fa007e0247009100c8000002ca0248
00da007d01b301a4002d00a5009c0034003400dc00dc0040004000310031
000a000a0082003000004027262524232221201f1e1d1c1b1a1918171615
14131211100f0e0d0c0b0a090807060504030201002c4523466020b02660
b004262348482d2c452346236120b02661b004262348482d2c45234660b0
206120b04660b004262348482d2c4523462361b0206020b02661b02061b0
04262348482d2c45234660b0406120b06660b004262348482d2c45234623
61b0406020b02661b04061b004262348482d2c0110203c003c2d2c204523
20b0cd442320b8015a51582320b08d44235920b0ed51582320b04d442359
20b09051582320b00d44235921212d2c20204518684420b001602045b046
76688a4560442d2c01b9400000000a2d2c00b9000040000b2d2c2045b000
43617d6818b0004360442d2c45b01a234445b01923442d2c2045b0032545
6164b050515845441b2121592d2cb00143632362b0002342b00f2b2d2c20
45b0004360442d2c20b0032552582359212d2c69b04061b0008b0c642364
8bb8400062600c642364615c58b0036159b002602d2c45b0112bb0172344
b0177ae5182d2c45b0112bb01723442d2c45b0112bb017458cb0172344b0
177ae5182d2cb002254661658a46b040608b482d2cb0022546608a46b040
618c482d2c4b53205c58b002855958b00185592d2c20b0032545b0192344
45b01a23444565234520b00325606a20b009234223688a6a606120b00052
58b21a401a4523614459b0005058b219401945236144592d2cb9187e3b21
0b2d2cb92d412d410b2d2cb93b21187e0b2d2cb93b21e7830b2d2cb92d41
d2c00b2d2cb9187ec4e00b2d2c4b525845441b2121592d2c0120b0032523
49b04060b0206320b000525823b002253823b002256538008a63381b2121
21212159012d2c4569b00943608a103a2d2c01b005251023208af500b001
6023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510f5
00edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d0001
00000000000082639d015f0f3cf50101080000000000a33d5b0000000000
b53f1f88feaafcb107bb07bf000000090001000100000000000100000600
fe0000000800feaafeac07bb000100000000000000000000000000000188
05c7002100000000020000000200000002aa0109034400bc040000000400
005a06aa007d063900520171006702aa005e02aa0036040000870483003d
0200008202aa0050020000870239000404000012040000e30400003d0400
0059040000170400004104000046040000280400006d0400003d023900a5
023900aa0483003d0483003d0483003b038d0087075e00b905c7001e0556
00230556003305c7002104e300170473001705c7003105c7002102aa0021
031d001505c7002504e30017071d001705c7001705c7003d0473002105c7
003d055600170473005504e3001c05c7001c05c70021078d000905c70015
05c7002d04e3000e02aa00b40239ffc002aa004403c100420400000002aa
0024038d004b04000007038d002f04000031038d002802aa002804000036
04000012023900280239ff8a040000040239002506390021040000210400
0034040000090400003102aa0009031d0068023900190400001204000025
05c7002a040000230400001c038d003403d7007f019a008703d7007f0454
001c05c7001e05c7001e0556003304e3001705c7001705c7003d05c7001c
038d004b038d004b038d004b038d004b038d004b038d004b038d002f038d
0028038d0028038d0028038d0028023900280239ffec0239ffde0239ffed
040000210400003404000034040000340400003404000034040000120400
001204000012040000120400006d033300570400006d0400001604000092
02cd003d03a0ffd504000017061400420614004207d700b802aa00bc02aa
00250464002d071d000905c7003d05b400650464002f0464002f0464002a
0400000e049cffb803f4005d05b4005a0696004d0464fff80231ff370235
0017027b00210625006a0556004d04000034038d002b02aa00bb0483003d
0464ffea0400000b0464002804e5fff9040000560400005a080000e30200
000005c7001e05c7001e05c7003d071d003805c700370400fffb080000f1
038d0037038d004702aa00ba02aa00bf0464002f03f400710400001c05c7
002d0156feaa05f4006402aa007f02aa00550473003f047300420400006d
0200006a02aa00bf038d00470800000e05c7001e04e3001705c7001e04e3
001704e3001702aa002102aa001702aa002102aa002105c7003d05c7003d
0652006905c7003d05c7001c05c7001c05c7001c0239002802aa001702aa
000402aa001702aa003602aa00f102aa008402aa006d02aa001e02aa01d7
02aa001704e300040239001e04730055031d004f04e3000e038d0034019a
008705c700210400003605c7002d0400001c047300210400000e0483003d
048300550266008702660007026600160600006d0600006d060000350400
000005c700310400003602aa002104730055031d006805560033038d002f
05560033038d002f0400003105c7001e038d004b05c7001e038d004b05c7
001e038d004b05560033038d002f05560033038d002f05c7002104000031
04e30017038d002804e30017038d002804e30017038d002804e30017038d
002804e30017038d002805c700310400003605c700310400003605c70031
040000360400003605c700210400001205c700210400ffd002aa00210239
ffca02aa000f0239ffdc02aa00210239002805c7002104720028031d0015
0239ff8a05c700250400000404e300170239002504e300170239002504e3
00170239002504e300170239002505c700170400002105c7001704000021
05c70017040000210400002105c7003d0400003405c7003d0400003405c7
003d040000340556001702aa00090556001702aa00090556001702aa0009
04730055031d006804730055031d006804e3001c0239001904e3001c0239
001904e3001c0239ffda05c7001c0400001205c7001c0400001205c7001c
0400001205c7001c0400001205c7001c0400001205c7001c04000012078d
000905c7002a05c7002d0400001c04e3000e038d003404e3000e038d0034
04730055031d006804e3001c023900190400004202aa002402aa00bc02aa
001702aa000402aa001702aa003602aa00f102aa002502aa008402aa001e
02aa00170200000002aa006d02aa01d7020000000200000005c7002105c7
00310400003604e300170239002505c700250400000405c7001705560017
02aa000904000021000000000000006a0000006a0000006a0000006a0000
006a0000006a0000006a0000006a0000006a0000006a0000006a000000f8
0000019400000194000001fc000001fc0000023600000236000002360000
0332000003ee000005080000062a000006e8000008420000095000000950
00000b1600000c5c00000c5c00000c5c00000c5c00000c5c00000c5c0000
0c5c00000c5c00000e1400000e1400000e1400000e1400000f620000107c
0000107c0000107c0000107c0000107c0000107c0000107c000011b80000
12c4000012c4000012c4000012c4000012c4000012c4000012c4000012c4
000014300000143000001430000014300000143000001430000014300000
1430000014300000143000001430000015fe000017000000170000001700
00001840000019260000192600001926000019f8000019f8000019f80000
1a9000001c6800001dbc00001eac0000200a0000200a0000210c000022a4
000023680000249c0000249c0000249c00002664000027a2000027a20000
27a2000027a2000027a2000027a2000027a2000027a2000027a2000027a2
000027a2000027a2000027a2000027a2000027a2000027a2000027a20000
27a2000027a2000027a2000027a2000027a2000027a2000027a2000027a2
000027a2000027a2000027a2000027a2000027a2000027a2000027a20000
27a2000027a2000027a2000027a2000027a2000027a2000027a2000027a2
000027a2000027a2000027a2000027a2000027a2000027a2000027a20000
27a2000027a2000027a2000027a2000027a2000027a2000027a2000027a2
000027a2000027a2000027a2000027a2000027a2000027a2000027a20000
27a2000027a2000027a2000027a2000027a2000027a2000027a2000027a2
000027a2000027a2000027a2000027a2000027a2000027a2000027a20000
27a2000027a2000027a2000027a2000027a2000027a2000027a2000027a2
000027a2000027a2000027a2000027a2000027a2000027a2000027a20000
27a2000027a2000027a2000027a2000027a2000027a2000027a2000027a2
000027a2000027a2000027a2000027a2000027a2000027a2000027a20000
27a2000027a2000027a2000027a2000027a2000027a2000027a2000027a2
000027a2000027a2000027a2000027a2000027a2000027a2000027a20000
27a2000027a2000027a2000027a2000027a2000027a2000027a2000027a2
000027a2000027a2000027a2000027a2000027a2000027a2000027a20000
27a2000027a2000027a2000027a2000027a2000027a2000027a2000027a2
000027a2000027a2000027a2000027a2000027a2000027a2000027a20000
27a2000027a2000027a2000027a2000027a2000027a2000027a2000027a2
000027a2000027a2000027a2000027a2000027a2000027a2000027a20000
27a2000027a2000027a2000027a2000027a2000027a2000027a2000027a2
000027a2000027a2000027a2000027a2000027a2000027a2000027a20000
27a2000027a2000027a2000027a2000027a2000027a2000027a2000027a2
000027a2000027a2000027a2000027a2000027a2000027a2000027a20000
27a2000027a2000027a2000027a2000027a2000027a2000027a2000027a2
000027a2000027a2000027a2000027a2000027a2000027a2000027a20000
27a2000027a2000027a2000027a2000027a2000027a2000027a2000027a2
000027a2000027a2000027a2000027a2000027a2000027a2000027a20000
27a2000027a2000027a2000027a2000027a2000027a2000027a2000027a2
000027a2000027a2000027a2000027a2000027a2000027a2000027a20000
27a2000027a2000027a2000027a2000027a2000027a2000027a2000027a2
000027a2000027a2000027a2000027a2000027a2000027a2000027a20000
27a2000027a2000027a2000027a2000027a2000027a2000027a2000027a2
000027a2000027a2000027a2000027a2000027a2000027a2000027a20000
27a2000027a2000027a2000027a2000027a2000027a2000027a2000027a2
000027a2000027a2000027a2000027a2000027a2000027a2000027a20000
27a2000027a2000027a2000027a2000027a2000027a2000027a2000027a2
000027a2000027a2000027a2000027a2000027a2000100000188005f0006
007800070002001000100027000007e801b9000600010000026b1d0a0001
000000000000006e00050001000000000001000500730001000000000002
000700780001000000000003001a007f0001000000000004000b00990001
000000000005000500000001000000000006000b00a40001000000000007
002e00af0001000000000100000d00dd0001000000000101000f00ea0001
000000000102000900f90001000000000103001001020001000000000104
000e01120001000000000105000e01200001000000000106000f012e0001
0000000001070013013d0001000000000108000b01500001000000000109
000e015b000100000000010a000e0169000100000000010b000e01770001
00000000010c00100185000100000000010d000a0195000100000000010e
0018019f000100000000010f001201b70001000000000110001101c90001
000000000111001801da0001000000000112000901f20001000000000113
000901fb0001000000000114000c02040001000000000115000f02100001
0000000001160012021f0001000000000117001202310001000000000118
001102430001000000000119000c0254000100000000011a001302600001
00000000011b000f0273000100000000011c00100282000100000000011d
000f0292000100000000011e001402a1000100000000011f001402b50001
000000000120001902c90001000000000121000e02e20001000000000122
001302f00001000000000123001503030001000000000124001503180001
0000000001250015032d0001000000000126001503420001000000010002
000803570001000000010007002b035f00010000000101000010038a0001
000000010101000e039a0001000000010102000903a80001000000010103
001303b10001000000010104000f03c40001000000010105001203d30001
000000010106001203e50001000000010107001803f70001000000010108
0012040f000100000001010900190421000100000001010a0015043a0001
00000001010b0012044f000100000001010c00140461000100000001010d
000c0475000100000001010e00200481000100000001010f001904a10001
000000010110001204ba0001000000010111001a04cc0001000000010112
000a04e60001000000010113000904f00001000000010114000f04f90001
000000010115001105080001000000010116001a05190001000000010117
001a05330001000000010118001a054d0001000000010119001905670001
00000001011a00190580000100000001011b001e0599000100000001011c
001b05b7000100000001011d001805d2000100000001011e001505ea0001
00000001011f001a05ff0001000000010120001f06190001000000010121
0015063800010000000101220016064d0001000000010123002106630001
000000010124001506840001000000010125001506990001000000010126
001506ae0001000000020002000806c30001000000020007003806cb0001
000000020100000d07030001000000020101001407100001000000020102
0009072400010000000201030017072d0001000000020104001107440001
000000020105000e07550001000000020106001a07630001000000020107
0012077d00010000000201080015078f0001000000020109002e07a40001
00000002010a000f07d2000100000002010b000f07e1000100000002010c
001e07f0000100000002010d0014080e000100000002010e002708220001
00000002010f001e08490001000000020110001808670001000000020111
001a087f0001000000020112000a08990001000000020113000c08a30001
000000020114001208af0001000000020115001508c10001000000020116
001408d60001000000020117001d08ea0001000000020118001d09070001
000000020119002c0924000100000002011a00140950000100000002011b
00140964000100000002011c00230978000100000002011d0020099b0001
00000002011e002209bb000100000002011f001309dd0001000000020120
001a09f00001000000020121000c0a0a000100000002012200120a160001
000000020123001f0a28000100000002012400130a470001000000020125
00160a5a000100000002012600160a700001000000030002000d0a860001
000000030007002c0a93000100000003010000120abf0001000000030101
00110ad1000100000003010200080ae20001000000030103000f0aea0001
000000030104000d0af90001000000030105000d0b060001000000030106
000e0b13000100000003010700120b21000100000003010800070b330001
00000003010900150b3a000100000003010a000f0b4f000100000003010b
000f0b5e000100000003010c00120b6d000100000003010d000a0b7f0001
00000003010e00170b89000100000003010f00120ba00001000000030110
00130bb20001000000030111001b0bc5000100000003011200090be00001
00000003011300080be9000100000003011400100bf10001000000030115
000d0c01000100000003011600110c0e0001000000030117000b0c1f0001
000000030118000b0c2a000100000003011900130c35000100000003011a
00100c48000100000003011b000e0c58000100000003011c00170c660001
00000003011d00120c7d000100000003011e00160c8f000100000003011f
00150ca50001000000030120001c0cba0001000000030121000e0cd60001
00000003012200180ce4000100000003012300200cfc0001000000030124
00150d1c000100000003012500150d31000100000003012600150d460001
00000004000200070d5b000100000004000700360d620001000000040100
001b0d98000100000004010100150db3000100000004010200090dc80001
00000004010300110dd1000100000004010400190de20001000000040105
00140dfb000100000004010600160e0f000100000004010700190e250001
000000040108001b0e3e0001000000040109002d0e59000100000004010a
00150e86000100000004010b00170e9b000100000004010c00110eb20001
00000004010d00130ec3000100000004010e00230ed6000100000004010f
001e0ef9000100000004011000110f17000100000004011100190f280001
000000040112000b0f410001000000040113000c0f4c0001000000040114
00110f58000100000004011500150f690001000000040116001a0f7e0001
000000040117002e0f980001000000040118002e0fc60001000000040119
00190ff4000100000004011a0011100d000100000004011b0021101e0001
00000004011c0025103f000100000004011d001c1064000100000004011e
00131080000100000004011f002010930001000000040120002510b30001
000000040121001510d80001000000040122001c10ed0001000000040123
001811090001000000040124001111210001000000040125001211320001
000000040126001211440001000000050002000611560001000000050007
0032115c00010000000501000013118e0001000000050101001311a10001
000000050102000911b40001000000050103001111bd0001000000050104
001211ce0001000000050105001011e00001000000050106000e11f00001
000000050107001011fe0001000000050108000c120e0001000000050109
001a121a000100000005010a000f1234000100000005010b000e12430001
00000005010c00121251000100000005010d00121263000100000005010e
00221275000100000005010f001c12970001000000050110001112b30001
000000050111001812c40001000000050112000f12dc0001000000050113
000712eb0001000000050114000c12f20001000000050115001512fe0001
000000050116001c13130001000000050117001f132f0001000000050118
001b134e000100000005011900181369000100000005011a001b13810001
00000005011b0016139c000100000005011c001b13b2000100000005011d
001813cd000100000005011e001813e5000100000005011f001013fd0001
0000000501200015140d0001000000050121000d14220001000000050122
0017142f00010000000501230018144600010000000501240012145e0001
000000050125001114700001000000050126001114810001000000060002
000514920001000000060007002c14970001000000060100001114c30001
000000060101001114d40001000000060102000914e50001000000060103
001114ee0001000000060104001314ff0001000000060105000915120001
0000000601060016151b0001000000060107001615310001000000060108
00121547000100000006010900101559000100000006010a001115690001
00000006010b0012157a000100000006010c0011158c000100000006010d
0012159d000100000006010e001b15af000100000006010f001815ca0001
000000060110001115e20001000000060111001815f30001000000060112
000a160b0001000000060113000a161500010000000601140023161f0001
000000060115001216420001000000060116001416540001000000060117
0013166800010000000601180013167b00010000000601190015168e0001
00000006011a001516a3000100000006011b001016b8000100000006011c
001d16c8000100000006011d001316e5000100000006011e001816f80001
00000006011f002117100001000000060120001b17310001000000060121
0014174c0001000000060122001617600001000000060123001d17760001
000000060124001917930001000000060125001417ac0001000000060126
001417c00001000000070002000a17d40001000000070007003817de0001
000000070100000f18160001000000070101001218250001000000070102
000918370001000000070103001518400001000000070104001118550001
000000070105000d18660001000000070106000e18730001000000070107
001018810001000000070108001618910001000000070109001518a70001
00000007010a000d18bc000100000007010b000d18c9000100000007010c
001a18d6000100000007010d000818f0000100000007010e001918f80001
00000007010f001119110001000000070110001019220001000000070111
0017193200010000000701120013194900010000000701130006195c0001
000000070114000c196200010000000701150011196e0001000000070116
0018197f0001000000070117001e19970001000000070118001e19b50001
000000070119000d19d3000100000007011a001719e0000100000007011b
001419f7000100000007011c001a1a0b000100000007011d00171a250001
00000007011e000f1a3c000100000007011f00161a4b0001000000070120
00161a61000100000007012100151a77000100000007012200121a8c0001
000000070123001f1a9e000100000007012400101abd0001000000070125
00141acd000100000007012600141ae1000100000008000200061af50001
00000008010000101afb000100000008010100131b0b0001000000080102
00091b1e000100000008010300101b270001000000080104000f1b370001
00000008010500161b46000100000008010600171b5c0001000000080107
00151b730001000000080108000f1b88000100000008010900141b970001
00000008010a00121bab000100000008010b00121bbd000100000008010c
00131bcf000100000008010d00121be2000100000008010e001c1bf40001
00000008010f00181c10000100000008011000101c280001000000080111
00171c380001000000080112000a1c4f000100000008011300071c590001
000000080114000b1c600001000000080115000f1c6b0001000000080116
00171c7a000100000008011700161c91000100000008011800161ca70001
00000008011900121cbd000100000008011a00181ccf000100000008011b
001d1ce7000100000008011c00251d04000100000008011d001b1d290001
00000008011e00191d44000100000008011f00211d5d0001000000080120
001b1d7e0001000000080121000f1d99000100000008012200171da80001
000000080123001d1dbf000100000008012400171ddc0001000000080125
00131df3000100000008012600131e060001000000090002000c1e190001
000000090100000c1e25000100000009010100111e310001000000090102
00091e42000100000009010300111e4b000100000009010400111e5c0001
000000090105000d1e6d0001000000090106000f1e7a0001000000090107
00101e890001000000090108000d1e99000100000009010900171ea60001
00000009010a000f1ebd000100000009010b000d1ecc000100000009010c
000f1ed9000100000009010d00101ee8000100000009010e00191ef80001
00000009010f000f1f11000100000009011000111f200001000000090111
00181f310001000000090112000c1f49000100000009011300061f550001
000000090114000c1f5b0001000000090115000c1f670001000000090116
00151f73000100000009011700201f880001000000090118001e1fa80001
00000009011900141fc6000100000009011a00141fda000100000009011b
00181fee000100000009011c00152006000100000009011d0016201b0001
00000009011e00112031000100000009011f001020420001000000090120
001620520001000000090121000b20680001000000090122001420730001
0000000901230017208700010000000901240013209e0001000000090125
001320b10001000000090126001320c400010000000d0002000820d70001
0000000d0100000f20df00010000000d0101001020ee00010000000d0102
000a20fe00010000000d01030015210800010000000d01040016211d0001
0000000d0105000e213300010000000d01060015214100010000000d0107
0012215600010000000d01080011216800010000000d0109001321790001
0000000d010a0013218c00010000000d010b0013219f00010000000d010c
000f21b200010000000d010d001421c100010000000d010e001921d50001
0000000d010f001d21ee00010000000d0110000b220b00010000000d0111
000f221600010000000d0112000a222500010000000d0113000a222f0001
0000000d0114000e223900010000000d0115000f224700010000000d0116
0014225600010000000d01170017226a00010000000d0118001522810001
0000000d0119001a229600010000000d011a001622b000010000000d011b
001522c600010000000d011c001322db00010000000d011d001822ee0001
0000000d011e0017230600010000000d011f0011231d00010000000d0120
0015232e00010000000d0121000d234300010000000d0122001323500001
0000000d01230015236300010000000d01240015237800010000000d0125
0015238d00010000000d0126001523a200010001000b0002000a23b70001
0001000b0100000c23c100010001000b0101000823cd00010001000b0102
000823d500010001000b0103001023dd00010001000b0104000e23ed0001
0001000b0105000c23fb00010001000b0106000e240700010001000b0107
0010241500010001000b0108000e242500010001000b0109000824330001
0001000b010a000e243b00010001000b010b000e244900010001000b010c
0014245700010001000b010d0018246b00010001000b010e002424830001
0001000b010f002224a700010001000b0110000c24c900010001000b0111
000c24d500010001000b0112000a24e100010001000b0113000824eb0001
0001000b0114000c24f300010001000b0115000e24ff00010001000b0116
0008250d00010001000b01170018251500010001000b01180018252d0001
0001000b01190010254500010001000b011a000a255500010001000b011b
0014255f00010001000b011c0010257300010001000b011d001025830001
0001000b011e0012259300010001000b011f001425a500010001000b0120
001225b900010001000b0121000a25cb00010001000b0122000625d50001
0001000b0123001e25db00010001000b0124001225f900010001000b0125
0008260b00010001000b01260008261300010002001300020006261b0001
000200130100000826210001000200130101000c26290001000200130102
000a263500010002001301030008263f0001000200130104000826470001
0002001301050008264f0001000200130106000826570001000200130107
000a265f0001000200130108000a26690001000200130109001026730001
00020013010a00082683000100020013010b0008268b000100020013010c
00082693000100020013010d0006269b000100020013010e000c26a10001
00020013010f000a26ad0001000200130110000c26b70001000200130111
000826c30001000200130112000426cb0001000200130113000e26cf0001
000200130114000e26dd0001000200130115000826eb0001000200130116
000a26f30001000200130117001426fd0001000200130118001427110001
00020013011900082725000100020013011a000e272d000100020013011b
000e273b000100020013011c000c2749000100020013011d000d27550001
00020013011e000a2762000100020013011f000c276c0001000200130120
001427780001000200130121000c278c0001000200130122000627980001
000200130123000a279e0001000200130124000a27a80001000200130125
000827b20001000200130126000827ba0001000300170002000427c20001
000300170100001027c60001000300170101000d27d60001000300170102
000427e30001000300170103000927e70001000300170104000b27f00001
000300170105000927fb0001000300170106000e28040001000300170107
000d28120001000300170108000e281f00010003001701090013282d0001
00030017010a000d2840000100030017010b000d284d000100030017010c
0012285a000100030017010d000e286c000100030017010e0018287a0001
00030017010f001328920001000300170110000e28a50001000300170111
000e28b30001000300170112000928c10001000300170113000428ca0001
000300170114000e28ce0001000300170115000928dc0001000300170116
001028e50001000300170117001228f50001000300170118000f29070001
000300170119000b2916000100030017011a000e2921000100030017011b
0018292f000100030017011c00162947000100030017011d0016295d0001
00030017011e000b2973000100030017011f0009297e0001000300170120
000e29870001000300170121000b29950001000300170122000d29a00001
000300170123001829ad0001000300170124000c29c50001000300170125
000929d10001000300170126000929da00010004000c0000008d29e30001
0004000c000200052a7000010004001f0000008d2a7500010004001f0002
00082b0200010005000a000200042b0a000100190021000200042b0e0001
00190021010000082b120001001900210101000a2b1a0001001900210102
00042b240001001900210103000a2b28000100190021010400082b320001
00190021010500082b3a000100190021010600082b420001001900210107
00082b4a0001001900210108000a2b520001001900210109000c2b5c0001
00190021010a00082b68000100190021010b00082b70000100190021010c
000a2b78000100190021010d00042b82000100190021010e00162b860001
00190021010f00082b9c000100190021011000082ba40001001900210111
000c2bac000100190021011200042bb8000100190021011300042bbc0001
00190021011400062bc00001001900210115000a2bc60001001900210116
00082bd0000100190021011700122bd8000100190021011800122bea0001
00190021011900082bfc000100190021011a00082c04000100190021011b
000c2c0c000100190021011c000a2c18000100190021011d000a2c220001
00190021011e000a2c2c000100190021011f00082c360001001900210120
000a2c3e000100190021012100082c48000100190021012200082c500001
001900210123000c2c580001001900210124000c2c640001001900210125
00082c70000100190021012600082c78332e356133a920313939302d3939
204170706c6520436f6d707574657220496e632e20a92031393831204c69
6e6f747970652041472020a920313939302d3931205479706520536f6c75
74696f6e7320496e632e20a920313939302d39312054686520466f6e7420
42757265617520496e632e54696d6573526567756c61724170706c652043
6f6d70757465722054696d657320526f6d616e54696d657320526f6d616e
54696d65732d526f6d616e54696d65732069732061207265676973746572
65642074726164656d61726b206f66204c696e6f74797065204147476c79
706820456666656374734566666563747320456e61626c65644c69676174
75726573436f6d6d6f6e204c696761747572657352617265204c69676174
757265734c6f676f204c69676174757265735265627573204c6967617475
7265734469706874686f6e67204c69676174757265734c65747465722043
6173654e6f2043617365204368616e6765416c6c20557070657220436173
65416c6c204c6f7765722043617365496e697469616c204361706974616c
7344696163726974696373446f6e277420436f6d706f7365204469616372
6974696373436f6d706f7365204469616372697469637356657274696361
6c20506f736974696f6e4e6f726d616c20566572746963616c20506f7369
74696f6e5375706572696f72734672616374696f6e734e6f204672616374
696f6e734261736963204672616374696f6e735479706f67726170686963
2045787472617348797068656e7320746f20456d20446173684879706865
6e20746f20456e2044617368536d6172742051756f7465734d617468656d
61746963616c2045787472617348797068656e20746f204d696e75735374
617220746f204d756c7469706c79536c61736820746f2044697669646549
6e657175616c697479204c69676174757265734368617261637465722041
6c7465726e617465734e6f2043686172616374657220416c7465726e6174
6976657350617373776f7264205374796c6542726f6b656e205665727469
63616c20426172436f6d6d612044696163726974696320466f726d73556e
69636f6465206465636f6d706f736974696f6e43616e6f6e6963616c2063
6f6d706f736974696f6e43616e6f6e6963616c20636f6d706f736974696f
6e5374616e6461726454696d65732065737420756e65206d617271756520
648e706f738e65206465204c696e6f747970652041474566666574732064
6520676c797068654566666574732061637469768e734c69676174757265
734c696761747572657320636f7572616e7465734c696761747572657320
72617265734c6967617475726573206465206c6f676f734c696761747572
657320646520728e6275734c69676174757265732064652064697068746f
6e677565734361737365206465206c61206c6574747265417563756e2063
68616e67656d656e74206465206361737365546f757420656e2068617574
206465206361737365546f757420656e206d696e757363756c65734d616a
757363756c657320696e697469616c65734469616372697469717565734e
652070617320696e748e67726572206c6573206469616372697469717565
73496e748e67726572206c657320646961637269746971756573506f7369
74696f6e20766572746963616c65506f736974696f6e2076657274696361
6c65206e6f726d616c655375708e7269657572734672616374696f6e7341
7563756e65206672616374696f6e4672616374696f6e732073696d706c65
73436f6d706c8e6d656e7473207479706f67726170686971756573446520
74726169742064d5756e696f6e2088207469726574206d44652074726169
742064d5756e696f6e2088207469726574206e4775696c6c656d65747320
7479706f67726170686971756573436f6d706c8e6d656e7473206d617468
8e6d6174697175657344652074726169742064d5756e696f6e2088207369
676e65206d6f696e7344d58e746f696c652088207369676e65204d756c74
69706c69657244652062617272652088207369676e652044697669736572
4c6967617475726573206427696e8e67616c69748e416c7465726e617469
766573206465206361726163748f726573417563756e6520616c7465726e
6174697665206465206361726163748f72655374796c65206465206d6f74
206465207061737365426172726520766572746963616c6520627269738e
65466f726d657320646961637269746971756573206465206c6120766972
67756c65448e636f6d706f736974696f6e20556e69636f6465436f6d706f
736974696f6e2063616e6f6e69717565436f6d706f736974696f6e206361
6e6f6e697175655374616e6461726454696d6573206973742065696e2065
696e676574726167656e657320576172656e7a65696368656e2064657220
4c696e6f74797065204147476c79706820456666656b7465456666656b74
652065696e67656368616c7465744c696761747572656e476562728a7563
686c69636865204c696761747572656e73656c74656e65204c6967617475
72656e4c6f676f204c696761747572656e4c696761747572656e20766f6e
2042696c6473796d626f6c656e44697068746f6e67204c69676174757265
6e47726f73732d4b6c65696e73636872656962756e674b65696e65205665
728a6e646572756e6720696e206465722047726f73732d4b6c65696e7363
6872656962756e6747726f73736275636873746162656e4b6c65696e6275
636873746162656e416e66616e67736275636873746162656e207a752056
657273616c69656e4469616b7269746973636865205a65696368656e4469
616b747269746973636865205a65696368656e2067657472656e6e742061
6e7a656967656e4469616b7269746973636865205a65696368656e206572
7374656c6c656e56657274696b616c6520506f736974696f6e696572756e
674e6f726d616c652076657274696b616c6520506f736974696f6e496e64
657820686f636842727563687a69666665726e4b65696e65204272756368
7a69666665726e45696e66616368652042727563687a69666665726e5479
706f6772616669736368652045787472617342696e646573747269636865
207a75204765766965727473747269636842696e6465737472696368207a
7520476564616e6b656e73747269636845727365747a656e206d69742067
6573636877756e67656e656e20416e669f6872756e67737a65696368656e
4d617468656d617469736368652045787472617342696e64657374726963
68207a75204d696e7573537465726e6368656e207a75204d756c7469706c
696b6174696f6e737a65696368656e536368728a67737472696368207a75
204469766973696f6e737a65696368656e4c696761747572656e20766f6e
20566572676c65696368736f70657261746f72656e416c7465726e617469
7665205a65696368656e4b65696e6520616c7465726e61746976656e205a
65696368656e4b656e6e776f72747374696c4765737472696368656c7465
204c696e69654b6f6d6d6120616c73206469616b72697469736368657320
5a65696368656e496e20556e69636f6465207a65726c6567656e616e6572
6b616e6e7465204b6f6d706f736974696f6e616e65726b616e6e7465204b
6f6d706f736974696f6e546573746f206e6f726d616c6554696d6573208f
20756e206d61726368696f207265676973747261746f206469204c696e6f
7479706520414745666665747469206964656f6772616d6d694566666574
7469206162696c69746174694c656761747572654c656761747572652063
6f6d756e694c6567617475726520726172654c65676174757265206c6f67
6f4c656761747572652072656275734c6567617475726520646974746f6e
6768694c6574746572654e657373756e61206d6f64696669636120636173
6f547574746f206d61697573636f6c65547574746f206d696e7573636f6c
65496e697a69616c69206d61697573636f6c65446961637269746963694e
6f6e20636f6d706f7272652064696163726974696369436f6d706f6e6920
64696163726974696369506f73697a696f6e6520766572746963616c6550
6f73697a696f6e6520766572746963616c65206e6f726d616c6553757065
72696f72694672617a696f6e694e657373756e61206672617a696f6e6546
72617a696f6e6920626173654578747261207469706f6772616669636954
72617474696e6f20456d5472617474696e6f20456e566972676f6c657474
6520656c6567616e74694578747261206d6174656d617469636954726174
74696e6f206d6564696f5374656c6c6120706572206d6f6c7469706c6963
6172654261727261207065722064697669646572654c6567617475726520
696e65677561676c69616e7a6543617261747465726920616c7465726e61
746976694e657373756e2063617261747465726520616c7465726e617469
766f5374696c652070617373776f7264426172726120766572746963616c
65207370657a7a617461466f726d65206469616372697469636865207065
72206c6520766972676f6c6553636f6d706f73697a696f6e6520756e6963
6f6465436f6d706f73697a696f6e652063616e6f6e696361436f6d706f73
697a696f6e652063616e6f6e6963614e6f726d61616c54696d6573206973
2065656e20676572656769737472656572642068616e64656c736d65726b
2076616e204c696e6f74797065204147456666656374656e20766f6f7220
7363687269667474656b656e73456666656374656e20696e676573636861
6b656c644c696761747572656e4e6f726d616c65206c696761747572656e
4f6e6765627275696b656c696a6b65206c696761747572656e4c69676174
7572656e2076616e206c6f676f27734c696761747572656e2076616e2072
6562757373656e4c696761747572656e2076616e20747765656b6c616e6b
656e486f6f66646c6574746572732f6b6c65696e65206c65747465727347
65656e2077696a7a6967696e6720696e20686f6f66646c6574746572732f
6b6c65696e65206c657474657273416c6c657320696e20686f6f66646c65
7474657273416c6c657320696e206b6c65696e65206c6574746572734265
67696e686f6f66646c6574746572734469616b7269746973636865207465
6b656e73446f6ee280997420566f6567206469616b726974697363686520
74656b656e7320696e5374656c206469616b72697469736368652074656b
656e732073616d656e566572746963616c6520706f73697469654e6f726d
616c6520766572746963616c6520706f7369746965537570657269657572
656e427265756b63696a666572734765656e20627265756b63696a666572
735374616e6461617264627265756b63696a666572734578747261207479
706f677261666973636865206f707469657356657276616e67206b6f7070
656c74656b656e20646f6f72206c616e6720676564616368746573747265
65706a6556657276616e67206b6f7070656c74656b656e20646f6f72206b
6f72742067656461636874657374726565706a6547656b72756c64652061
616e68616c696e677374656b656e735769736b756e64696765206f707469
657356657276616e67206b6f7070656c74656b656e20646f6f72206d696e
74656b656e537465727265746a6520616c73207665726d656e696776756c
646967696e677374656b656e53636875696e652073747265657020616c73
206465656c74656b656e4f6e67656c696a6b65206c696761747572656e41
6c7465726e6174696576652077656572676176652076616e2074656b656e
734765656e20616c7465726e617469657665207765657267617665207661
6e2074656b656e735374696a6c20766f6f72207761636874776f6f72644f
6e64657262726f6b656e20766572746963616c6520737472656570446961
6b7269746973636865206b6f6d6d6174656b656e73556e69636f64652d73
706c697473696e674b6c61737369656b652077656572676176654b6c6173
7369656b652077656572676176654e6f726d616c54696d6573208a722065
747420726567697374726572617420766172756d8a726b6520669a72204c
696e6f747970652041475465636b656e62696c6473656666656b74657245
6666656b74657220616b74697665726164654c696761747572657256616e
6c696761206c69676174757265724f76616e6c696761206c696761747572
65724c6f676f7479706c696761747572657252656275736c696761747572
6572446966746f6e676c6967617475726572426f6b73746176737374696c
496e67656e208a6e6472696e6720617620736b6966746c8a6765416c6c74
20692076657273616c6572416c6c7420692067656d656e6572426567796e
6e656c736576657273616c65724469616b72697469736b61207465636b65
6e538a747420696e74652069686f70206469616b7472697469736b612074
65636b656e538a74742069686f70206469616b72697469736b6120746563
6b656e56657274696b616c20706f736974696f6e4e6f726d616c20766572
74696b616c20706f736974696f6e557070689a6a6461207465636b656e42
728c6b74616c496e67612062728c6b74616c4772756e646c8a6767616e64
652062728c6b74616c5479706f6772616669736b61207370656369616c65
6666656b74657254768c2062696e646573747265636b2074696c6c207461
6e6b73747265636b42696e646573747265636b2074696c6c2074616e6b73
747265636b5479706f6772616669736b612063697461747465636b656e4d
6174656d617469736b61207370656369616c656666656b74657242696e64
6573747265636b2074696c6c206d696e757353746a8a726e612074696c6c
206d756c7469706c696b6174696f6e536e656473747265636b2074696c6c
206469766973696f6e4c696761747572206176206c696b68657473746563
6b656e5465636b656e616c7465726e61746976496e6761207465636b656e
616c7465726e617469764c9a73656e6f7264737374696c42727574657420
76657274696b616c742073747265636b4b6f6d6d61206469616b72697469
736b6120666f726d6572556e69636f64652d7570706c9a736e696e674b61
6e736c696b6f6d706f736974696f6e4b616e736c696b6f6d706f73697469
6f6e436f6d9c6e54696d657320657320756e61206d617263612072656769
737472616461206465204c696e6f7479706520414745666563746f732064
6520676c69666f7345666563746f7320616374697661646f734c69676164
757261734c696761647572617320636f6d756e65734c6967616475726173
20696e757375616c65734c6f676f7469706f734c6967616475726173206a
65726f676c9266696361734c696761647572617320646520646970746f6e
676f7343616a61206465206c6173206c657472617353696e2063616d6269
61722063616a61546f646f20656e2063616a6120616c7461546f646f2065
6e206d696e9c7363756c61734d61799c7363756c6120696e696369616c53
69676e6f73206469616372927469636f734e6f206372656172207369676e
6f73206469616372927469636f734372656172207369676e6f7320646961
6372927469636f73506f73696369976e20766572746963616c506f736963
69976e20766572746963616c206e6f726d616c5375706572696f72657346
72616363696f6e65734672616363696f6e6573206175746f6d8774696361
73206465736163746976616461734672616363696f6e6573206287736963
6173457874726173206465207469706f677261669261446520677569976e
2061207261796120d26dd3446520677569976e2061207261796120d26ed3
436f6d696c6c6173207469706f6772876669636173457874726173206465
206d6174656d877469636173446520677569976e2061206d656e6f734465
2061737465726973636f2061206d756c7469706c6963616369976e446520
6261727261206120646976697369976e4c69676164757261732064652064
6573696775616c646164466f726d617320616c7465726e61746976617320
6465206361726163746572657353696e206361726163746572657320616c
7465726e617469766f73457374696c6f20646520636f6e74726173659661
426172726120766572746963616c2070617274696461466f726d61732064
69616372927469636173206465206c6120636f6d61446573636f6d706f73
696369976e20646520556e69636f6465436f6d706f73696369976e206361
6e976e696361436f6d706f73696369976e2063616e976e696361416c6d69
6e64656c696754696d657320657220657420726567697374726572657420
766172656dbe726b652074696c68bf72656e6465204c696e6f7479706520
41475564736b8c72656e20656666656b74456666656b74657220736c8c65
742074696c4c6967617475726572416c6d696e64656c696765206c696761
7475726572536abe6c646e65206c69676174757265724c6f676f6c696761
747572657252656275736c6967617475726572446966746f6e676c696761
747572657253746f7265206f6720736d8c20626f67737461766572496e67
656e20be6e6472696e6720692073746f72654b756e206d616e75736b6c65
724b756e206d696e75736b6c657253746f726520626567796e64656c7365
73626f67737461766572416363656e746572446f6ee280997420496e6473
be74746520616363656e746572496e6473be74746520616363656e746572
4c6f6472657420706c61636572696e674e6f726d616c206c6f6472657420
706c61636572696e6748be766574202620666f726d696e64736b65744272
bf6b6572496e67656e206272bf6b6572456c656d656e74be7265206272bf
6b65725479706f6772616669736b652074696c66bf6a656c7365724c616e
672074616e6b65737472656720736f6d2062696e646573747265674b6f72
742074616e6b65737472656720736f6d2062696e64657374726567436974
6174696f6e737465676e4d6174656d617469736b652074696c66bf6a656c
7365724d696e757320736f6d2062696e6465737472656753746a65726e65
20766564206d756c7469706c696b6174696f6e536b728c73747265672076
6564206f726464656c696e67556c696765206c6967617475726572416c74
65726e617469766520736b726966747465676e496e67656e20616c746572
6e6174697665207465676e416467616e67736b6f646562657465676e656c
73654272756474206c6f647265742073747265674b6f6d6d61206d656420
6469616b72697469736b207564666f726d6e696e67556e69636f64656f70
6cbf736e696e674b616e6f6e69736b206b6f6d706f736974696f6e4b616e
6f6e69736b206b6f6d706f736974696f6e4e6f726d616c45666569746f73
20646520476c69666f45666569746f7320486162696c697461646f734c69
676164757261734c696761647572617320436f6d756e734c696761647572
61732052617261734c6967616475726173206465204c6f676f7469706f73
4c696761647572617320486965726f676c9266696361734c696761647572
6173206465204469746f6e676f734361697861206465204c657472617353
656d204d7564616e8d612064652043616978615475646f20656d20436169
786120416c74615475646f20656d204d696e9c7363756c61734d61699c73
63756c617320496e69636961697353696e61697320446961637292746963
6f734e8b6f2043726961722053696e616973204469616372927469636f73
43726961722053696e616973204469616372927469636f73506f73698d8b
6f20566572746963616c506f73698d8b6f20566572746963616c204e6f72
6d616c5375706572696f7265734672618d9b657353656d204672618d9b65
734672618d9b6573204287736963617341646963696f6e61697320546970
6f6772876669636f73489266656e207061726120547261766573738b6f20
6d489266656e207061726120547261766573738b6f206e41737061732054
69706f677287666963617341646963696f6e616973206465204d6174656d
8774696361489266656e20706172612053696e616c206465205375627472
618d8b6f41737465726973636f20706172612053696e616c206465204d75
6c7469706c6963618d8b6f426172726120706172612053696e616c206465
2044697669738b6f4c696761647572617320646520446573696775616c64
616465466f726d617320416c7465726e6174697661732064652043617261
63746572657353656d204361726163746572657320416c7465726e617469
766f73457374696c6f2064652053656e6861426172726120566572746963
616c205175656272616461466f726d617320446961637292746963617320
64612056927267756c614465636f6d706f73698d8b6f20646520556e6963
6f6465436f6d706f73698d8b6f204f72746f646f7861436f6d706f73698d
8b6f204f72746f646f786156616e6c69672074656b73745465676e656666
656b746572456666656b74657220616b7469766572744c69676174757265
7256616e6c696765206c6967617475726572536a656c646e65206c696761
74757265724c6f676f6c696761747572657252656275732d6c6967617475
726572446966746f6e676c6967617475726572536f6d20626f6b73746176
6572496e67656e20656e6472696e672073746f72652f736d8c53746f7265
20626f6b737461766572536d8c20626f6b73746176657253746f7220666f
72626f6b737461764469616b72697469736b65207465676e446f6ee28099
74202d2073616d6d656e732e206469616b722e53616d6d656e732e206469
616b722e4c6f64647265747420706f7369736a6f6e4e6f726d616c206c6f
64647265747420706f7369736a6f6e546f70706c696e6a657274654272bf
6b6572496e67656e206272bf6b6572456e6b6c65206272bf6b6572547970
6f6772616669736b65202d20656b7374726142696e6465737472656b6572
2074696c206c616e672074616e6b65737472656b42696e6465737472656b
2074696c206b6f72742074616e6b65737472656b536d6172746520616e66
bf7273656c737465676e4d6174656d617469736b65202d20656b73747261
42696e6465737472656b2074696c206d696e75737465676e53746a65726e
6520736f6d2067616e67657465676e536b728c737472656b20736f6d2064
656c657465676e556c696b686574736c69676174757265725465676e616c
7465726e617469766572496e67656e207465676e616c7465726e61746976
6572506173736f72647374696c4272757474206c6f646472657474206c69
6e6a654b6f6d6d616469616b72697469736b6520666f726d6572556e6963
6f64652d6174736b696c6c656c73654b616e6f6e69736b206f7070627967
67696e674b616e6f6e69736b206f707062796767696e674e6f726d61616c
694d65726b6b697465686f73746565745465686f737465657420708a8a6c
6c8a4c696761747575726974546176616c6c69736574206c696761747575
72697448617276696e6169736574206c6967617475757269744c6f676f6c
6967617475757269746b75766173796d626f6c696c696761747575726974
646966746f6e67696c69676174757572697449736f2f7069656e69206b69
726a61696e4569206162632d414243206d7575746f7374614b61696b6b69
207375757261616b6b6f7369614b61696b6b69207069656e61616b6b6f73
696149736f20416c6b756b69726a61696e4469616b7269697474696e656e
206d65726b6b694569206469616b72696974746973698a206d65726b6b65
6a8a4d756f646f737461206469616b726969747469736574206d65726b69
7450797374796173656e746f4e6f726d61616c69206173656e746f596c8a
696e64656b73694d7572746f6c757675744569206d7572746f6c756b756a
6150657275736d7572746f6c757675745479706f67726166697365742065
6b73747261745461767576696976617420456d2d766969766f696b736954
617675766969766120656e2d76696976616b73695479706f677261666973
6574206c61696e6175736d65726b69744d617465726d6161747469736574
20656b7374726174546176757669697661206d69696e756b73656b736954
8a687469206b6572746f6d65726b696b73694b6175747461766969766120
6a616b6f6d65726b696b7369457269737575727569736574206c69676174
75757269744d65726b6b6976616968746f6568646f744569206d65726b6b
6976616968746f6568746f6a6153616c6173616e617479796c6942726f6b
656e20566572746963616c20426172436f6d6d6120446961637269746963
20466f726d73556e69636f6465206465636f6d706f736974696f6e4b616e
6f6f6e696e656e206b6f6b6f6f6e70616e6f4b616e6f6f6e696e656e206b
6f6b6f6f6e70616e6f838c834d83858389815b95b68e9a82d682cc8cf889
ca8cf889ca974c8cf8838a834b8360838388ea94ca934982c8838a834b83
60838393c18eea82c8838a834b83608383838d8353838a834b836083838a
4795b68e9a838a834b8360838393f18f6495ea89b9838a834b8360838391
e595b68e9a815e8fac95b68e9a95cf8d5882c882b582b782d782c491e595
b68e9a82c982b782d782c48fac95b68e9a82c992508cea82cc90e693aa82
f091e595b68e9a82c9835f83438341834e838a83658342834a838b837d81
5b834e835f83438341834e838a83658342834a838b837d815b834e82f08d
8790ac82b582c882a2835f83438341834e838a83658342834a838b837d81
5b834e82f08d8790ac82b782e9908292bc88ca927595cf8d5895578f8090
8292bc88ca92758fe3957482ab95b68e9a95aa9094955c8cbb95aa909495
5c8ea682c882b595aa9094955c8ea682b582c882a293c195ca955c8cbb83
6e83438374839382f020656d20835f83628356838582c9836e8343837483
9382f020656e20835f83628356838582c98358837d815b8367834e834881
5b836790948a779770955c8cbb836e83438374839382f0837d8343836983
5882c981758196817682f08175817e817682c98175815e817682f0817581
80817682c9817581848181817682f081758186817682c995b68e9a82cc83
6f838a8347815b835683878393836f838a8347815b83568387839382c882
b583708358838f815b8368946a926690fc834a8393837d835f8343834183
4e838a83658342834a838b837d815b834e95aa89f082b382ea82bd20556e
69636f646590b38b4b8d8790ac90b38b4b8d8790acbcd0b7c7c5e9b2c5b8
b9aec4aa47a477b1d2a5ceaabaaec4aa47b373a672bfefb6b5b6b0b160a5
ceb373a672a4d6a5ceb373a672bcd0bb78b373a672b565c1bcb373a672c2
f9a5c0adb5b373a672a672a5c0a46aa470bc67a4a3a7f3b0caa672a5c0a4
6aa470bc67a5feb3a1a46abc67a5feb3a1a470bc67a672adbaa46abc67bc
d0adb5b2c5a4a3b2d5a658bcd0adb5b2c5b2d5a658bcd0adb5b2c5a4e5a6
72b2beb0caa6ecb86da5bfb160a6ecb86da457bcd0a4c0bcc6a15da774a4
70bcc6a15ea4a3a8cfa5cea4c0bcc6aee6a6a1b0f2a5bba4c0bcc6b1c6a6
4ca55cafe0b6b0c25fa672b2c5c2e0acb020456d20af7da7e9b8b9c25fa6
72b2c5c2e0acb020456e20af7da7e9b8b9b4bcbc7aa4deb8b9bcc6bec7b2
c5b8b9a55cafe0b6b0c25fa672b2c5c2e0acb0b4eeb8b9ac50b8b9c2e0ac
b0adbcb8b9b1d7bd75c2e0acb0b0a3b8b920a4a3b5a5a6a1b2c5b8b9a672
a4b8b4c0a5cea672a7cea4a3a8cfa5cea672a4b8b4c0a5cea672a7ceb6b0
b14bbd58a672a4b8bccba6a1aabdb5eabd75b372c249bcd0adb5b2c5b2ce
a440bd58a4c0b8d1bcd0b7c7b2d5a658bcd0b7c7b2d5a658c0cfb9ddb1db
b8b328476c7970682920c8bfb0fac8bfb0fa20bbe7bfebb0a1b4c9c7d5c0
dac0cfb9dd20c7d5c0dabaf1c0cfb9dd20c7d5c0dab7ceb0ed20c7d5c0da
bfacbbf320b1d7b8b220c7d5c0dac0ccc1dfb8f0c0bd20c7d5c0dab4eb2f
bcd2b9aec0da20baafc7fcb4eb2fbcd2b9aec0da20baafb0e620bec8c7d4
b4ebb9aec0dab7ce20baafc8afbcd2b9aec0dab7ce20baafc8afc3b920b1
dbc0dab8b820b4ebb9aec0dab7ceb9dfc0bd20b1b8bab020c7a5bdc3b9df
c0bd20b1b8bab020c7a5bdc320b1b8bcba20bec8c7d4b9dfc0bd20b1b8ba
b020c7a5bdc320b1b8bcbabcbcb7ce20c0a7c4a120c1f6c1a4bab8c5eb20
bcbcb7ce20c0a7c4a1beeeb1fa20b9aec0dabad0bcf6bad0bcf620c1f6c1
a420bec8c7d4b1e2babb20bad0bcf6bcbcb7c3b5c820c7a5c7f620b9e6bd
c4b5ce20c7cfc0ccc7c2c0bb20b4ebbdacb7cec7cfc0ccc7c2c0bb20b4eb
bdacb7ceb0f6bdbd20b5fbbfc8c7a5bcf6c7d020b0fcb7c320c7a5c7f6c7
cfc0ccc7c2c0bb20b8b6c0ccb3cabdba20b1e2c8a3b7cebab0b8f0bee7c0
bb20b0f6c7cfb1e220b1e2c8a3b7cebdbdb7a1bdacb8a620b3aab4a9b1e2
20b1e2c8a3b7cebaceb5eec8a320c7d5c0dab9aec0da20b4ebc4a1b9aec0
da20b4ebc4a120bec8c7d4becfc8a320bdbac5b8c0cfbad0b8aeb5c820bc
bcb7cebcb1c4deb8b620b9dfc0bd20b1b8bab020c7a5bdc320c7fcbdc455
6e69636f646520bad0bcaeb1e2babb20b1b8bcbab1e2babb20b1b8bcba43
6f7079726967687420313939302d3938204170706c6520436f6d70757465
7220496e632e20436f707972696768742031393831204c696e6f74797065
20414720436f7079726967687420313939302d3931205479706520536f6c
7574696f6e7320496e632e20436f7079726967687420313939302d393120
54686520466f6e742042757265617520496e632ee2eac7d3ea436f707972
6967687420313939302d3938204170706c6520436f6d707574657220496e
632e20436f707972696768742031393831204c696e6f7479706520414720
436f7079726967687420313939302d3931205479706520536f6c7574696f
6e7320496e632e20436f7079726967687420313939302d39312054686520
466f6e742042757265617520496e632ee5cae6a0d3c7cfe7f8e2e9ecb3a3
b9e6d7d6d0ced0a7b9fbd2d1c6f4d3c3d0a7b9fbc1acd7d6b9abb9b2b5c4
c1acd7d6cfa1d3d0c1acd7d6b1ead6bec1acd7d6bbadc3d5c1acd7d6d4aa
d2f4c1acd7d6d7d6c4b8b4f3d0a1d0b4cedeb4f3d0a1d0b4b8c4b1e4c8ab
b2bfb4f3d0b4c8abb2bfd0a1d0b4cad7d7d6c4b8b4f3d0b4d6d8d2f422b2
bbc5c5d6d8d2f42c20b2bbb8b4bacfd6d8d2f422b8b4bacfd6d8d2f4c9cf
cfc2cebbd6c3d5fdb3a3c9cfcfc2cebbd6c3c9cfb1eab7d6cafdcedeb7d6
cafdbbf9b1becabdb7d6cafdc5c5d7d6b8bdbcd3c1acd7d6bac5b1e42045
6d20b6ccbbaecfdfc1acd7d6bac5b1e420456e20b6ccbbaecfdfd7f3d3d2
d2fdbac5cbe3caf5b8bdbcd3c1acd7d6bac5b1e4bcf5bac5d0c7bac5b1e4
b3cbbac5d0b1b8dcb1e4b3fdbac5b2bbb5c8cabdc1acd7d6d7d6b7fbb1b8
d1a1ceded7d6b7fbb1b8d1a1c3dcc2ebd1f9cabdbce4b6cfcafacfdfb6ba
b5e3d6d8d2f4d0cecabd556e69636f646520b7d6bde2b9e6b7b6c5c5d7d6
b9e6b7b6c5c5d7d60000400f09cf54010f54013fd029019f540140410d01
fb0001003001fb0001002001fb0001001001fb0001000001fb400b010020
01900701900601f0414f0204000100ef0203000100c00201000100b001ff
00b0020100bf0208000300af020100af02080002009f0202009f02080002
007f0200007f0202007f0208008f0200008f020200800205008f02080007
006f0200006f0202006f0205006f02080004005f020200500203005f0208
0003004f0202004f0204004f0208000300300202003f0204003002080003
002f0201002f0204002f02080003001f0208b2010840ba01e5014d0152b5
0f1fc2710e1fbc014b014d0062001f0131b2864f1fbe01a60020000d018f
0020000d0182400e200dde200dda200d8f200d7f200dbe018b0050000d01
6c0050000d0101400e500dd8500d43500d3f500d3a500dbb013b0028000d
01034014280dbd280db8280da7280d7c280d76280d2d280dbe01b1004a00
0d01a7004a000d019440204a0df74a0dc84a0d984a0d854a0d7a4a0d664a
0d214a0d621c0d241c0d1b1c0db8017eb60f920f900f0009b8017eb4900d
92900db801f5b3312f1f41b801f3b5331f2b2c361fb80189b2542c1fb801
83b254ab1f4115018100290401001f018000290201001f017c0044020100
1f017901300201001f017801300401001f0177b22f291fb80173b23e9e1f
b80171b23ee41fbc016b002e0401001f016ab233e41fb80138b2545e1f41
09013300290401001f013200440801001f012db23e931fb8012ab22ccd1f
41110127002e0125001f012400330801001f012300330401001f01220033
0401001f0106b254261fb80105b4542c1fff29b80101b21ffe88b80201b6
1ffb2f521ff62eb80401b21ff52eb80801b21fe129b802abb21fdd2fb802
ab40171fdb2f5e1fd93e4a1fc454261fc354e41fbf2f6c1fba2cb80401b2
1fa944bc0401001f00a80130019a400b1fa52f931fa42f891fa23eb80401
b21fa033b80801b21f9654b80801b21f9529b80401b61f8954261f732eb8
0156b21f7233b802ab400b1f6b2f6c1f6a2c4b1f632eb8019a400f1f2e2c
371f532fbb1f512f721f4f2cb80401b21f4944b80401b21f482fba040100
1f01f3400d411d1f412f1d1f3d3ecd1f3b44b80201b21f392eb8019ab21f
343eb80401b21f322eb80201b61f313e4c1f2b2eb80404b61f2a54311f22
33b80201402d1f5567075f075507370735073007260725071e071d071408
120810080e080c080a080808060804080208000814b8ffe0402b00000100
140610000001000604000001000410000001001002000001000200000001
000002010802004a00b801ff85b0018d16763f183f123e113946443e1139
46443e113946443e113946443e11394660443e11394660442b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b1db0964b5358b0aa1d59b0324b5358
b0ff1d594bb03553205c58b901e701e54544b901e601e545445958b90121
01e7455258b901e70121445959184bb04c5058b801e64569b801e7456961
b0405258b901e601e645b040614459594bb05653205c58b9002901e64544
b9005401e645445958b902360029455258b9002902364459594bb0895320
5c58b9002f01e74544b9004401e745445958b902e4002f455258b9002f02
e44459594bb0cd53205c58b188294544b1292945445958b9052e00884552
58b90088052e4459594bb8020153205c58b90130002f4544b12f2f454459
58b90ab00130455258b901300ab04459594bb01d53205c58b133334544b1
3e3345445958b13233455258b133324459594bb02f53205c58b133334544
b12c3345445958b15233455258b133524459594bb05b53205c58b1333345
44b12e3345445958b1a033455258b133a04459592b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2bb35b9b819c456523456023456560234560b0
8b766818b080622020b1819b4565234520b003266062636820b003266165
b09b236544b081234420b15b9c4565234520b003266062636820b0032661
65b09c236544b05b2344b1009c455458b19c406544b25b405b4523614459
b3868d7145456523456023456560234560b089766818b080622020b1718d
4565234520b003266062636820b003266165b08d236544b071234420b186
454565234520b003266062636820b003266165b045236544b0862344b100
45455458b145406544b286408645236144592b2b2b2b4569534273737373
737373737373737373737373737373737475755e73735e0000>
[10147 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 566 19 <00020012ffed03b10560000e001e00924022ac01eb0ce51403c500d600e5
000331003505390d034c0806a01e050ea0160d028812b80208b3200a881a
b80207b1201f2fccf4ed10f6ed003fed3fed313043794038001d0c261825
142608251c26102504260d170a35000015023501071d0a3500050f023501
0b190e350001130e3500091b06350103110635012b2b2b2b012b2b2b2b2b
2b2b2b2b2b2b8101715d005d241211342702232203061514171633121716
15140702212227261110373633027d6e213eaaaa3f212240b0e37f653e75
fee0c57f885b7bff2501420131f391010efeea94f2e388fe053bf1c3fdc7
b0feb5b3bf01480102bafd00>OMOBAA+Times-Roman AddT42Char 
1 818 20 <000100e300000325055e0016006f4019761486140226143614020cfd6208
e02203f96207e02314e00db8016eb2136214b8017e40110d0c0302040815
0508070c1817171a0203b80130b50c0c0d191718bc0178002101a5015d00
182b2b4ef43c4d10fd3c4e456544e6003f3c3f1217394df5edfc01f52b2b
313000715d001615111416171521353e0135113426232206073525330262
015270fdcc794a18281a5324016f0c05590509fb4c4d2a041c1e06365a03
9e30321d101cbb00>OMOBAA+Times-Roman AddT42Char 
1 1006 21 <0001003d000003cb0564001b00b8404c2512016c006e016913036402960f
f60ff61404050f0614150f2514042b08142100000118190a0b010b0a0303
001a0318191119180b0a01050614066b0e051514a41a4000211b0c038811
bc19bb0208001d00000207b11d1c2fcce410f6f4ed003f1a3dcc181a3cfd
3c3fed111217390111123912391112173910c910c90705101ac531304379
401c04100825070d0a3500090a0c0b050f033501090c0635010410063501
002b2b012b103c103c2b2b8101715d005d71370801353426232207060727
3e0133321615140201213236371703213d016e0106a06f89552f2b2b32ef
89a9d1e2fe8601cb604e311a6ffce117017c0164a9949b64377209e6b3d5
9aa4fed0fe7b2e590cfee900>OMOBAA+Times-Roman AddT42Char 
1 1288 22 <00010059fff10376056a002f0095403c49195b070207241624290739074b
076a076a0879077b08a919c6240b172118181700032c0122100d18170213
0c02f52940220d21c0090109092f1313b80173400f1b052f88290d106b1e
056ba0260126bd02000031000d0136002c0209b131302fccf4e410f65de5
d4ed003fed3fed1112392f5d3d1add7dcc181a10fd111217390111123939
121739101a18c93130015d005d36163332363534272623220607273e0135
34262322070607273e013332161514070607161716151400212226353436
33d6b53f8c88375ddd0d181002a0b8915d6e542e351f28da8f99a7452752
603a6dfed5feec7b632125ae72bd6f6b518901021a3a967b6d72512c5c07
98b6a86e61512e39293769a1befede492a1a3000>OMOBAA+Times-Roman AddT42Char 
1 1578 23 <00020017000003c7055e0002000d0085401f780301050d06040902030d00
010173120d0d03010d000c03040a000103060dbb01740007000c0197b50a
03050a0c0ab8011e400900a4093004e0040204b80136b720064006a00603
06bb020a000f000c0209b10f0e2fcce410f65df45d3cfde4003f3f10f43c
f53c1139390111123911123939872e2b047d10c5001112390f3130015d09
012113331133152311231121350255fe1501eb425fd1d19ffdc00490fd4a
0384fc7c85feab015585>OMOBAA+Times-Roman AddT42Char 
1 1768 24 <00010041ffea037f057f002c00ce4027861b013508141501000229170514
2214150b0c090f171a100f0f73121b1b1a1b1a100f0405292cb80132401e
2509a41b1b021a191aa440152111100402f6250d056b22b6a015b0150215
bb0208002e00290207b12e2d2fcce410f65df4ed003fed3f3c1ac41afd3c
1112397d2f18ec10ed0111121739870e2e2b057d10c50011391112393911
33011239113912173910c9313018437940261c24030820211f211e211d21
04060726081c053501032405350106210935011c1b0423023500002b103c
2b012b2b2b2a8181015d361633323635102526232226273e013713213236
3717070e01232107161716171e011514002322272635343633d2b93273ac
feec9984160b08020302da01ad20231c104e042415fe7d55a44c7d54484a
fec5f1623c642b2db781cb940103723f0309080b0501de161e0eb90905af
1c192a5247b163ddfed8131f501e2d00>OMOBAA+Times-Roman AddT42Char 
1 2114 25 <00020046ffea03be057800170025009040235b0f013508090a1725101b14
4f6f1b011b461b02400a21090522a0020d258800170117b80208b427101f
8805b80207b127262fccf4fd7dc41810f65ded003fed3f1a3dcd1a181239
762f185ded113901111239393130437940262024151a000419261a152535
0121031f3500230125350118161b350120042235002400223500002b2b2b
012b2b2b2b818181005d00022322001110253621170e01070e0107363736
33321615262726232207061514123332363503beebbcb0fedf0118fa0138
057db5474980183e2d50519fd8b72a46a89b331e8b96776c0110feda014a
01120161fdd421174f4748de6d261220dccc3867ac5c367ea3fec8cb8800
>OMOBAA+Times-Roman AddT42Char 
1 2384 27 <0003006dffea03880563000b00180033012b40aa8a079a1d951e9521972b
962d992e9533a51ea92ba62da533f32d0d052d162d022b043d043a063a31
3a32430647174627453147325a035d046c0469057b04730c760d75167317
751874258c048b0585179725b503b504b605b721d928f6041f2804241835
03030a040a27190d19243c043a263c275a055b195b1a5b336a046a056a19
6a1a6a3310440833261805040f1533261805040b12a01f050ba02c0d0f6b
22b7026b0029a0290229b80208400b35156b1cb6086bbf2f012fb80207b1
35342fccf45dedf4ed10f65dedf4ed003fed3fed11173901111217393130
437940322a2e1d211014090a00010a2d083500002b023501131e15350011
200f3501092e0b3500012a0b3500141d1235011021123501002b2b2b2b01
2b2b2b2b8181818181015d00715d01715d2436353426270e011514163312
37363534262322061514161704272635343633321615140706071e011514
0623222635343736370276767dc2564e8d6d6b243e75775c788d73fee230
4adbafa1be61387daa93d9b6a3e95135832280606d878936ac5089a2033e
2d4d6d5f8574535ea1470a3f607484b8ae73755d35457ebb7f90c4b5947f
613f5800>OMOBAA+Times-Roman AddT42Char 
1 2838 28 <0002003dffd003af0563000e002b00b94050e618e619f518f51904461c56
1d771b771c871b871c9a10961b951caa10ba29ca29da10da290e2e081918
18192820030103050b1925182003010308254f5f0e010e490e1808a02b05
180d058800110111b80208b32d0b8828b80207b12d2c2fccf4ed10f65ded
003f3fed1239762f5d18ed12173911123901111217391239390010c93130
43794022262a06100d260b3500092a0b3500070f0535010c270e35000a29
08350106100835012b2b2b012b2b2b8181005d015d0036373e0135340223
2206151416331a01151402070607060727363736373e0137070607062322
26353412330243910a04068c8762797194c0f0726d7fc36da60a68457c4b
6a7f10234a64342baac7edb9023d4c1a0a8128d00104b2b192f80326fea1
d898fec67b8e45271528181b314765f9541a38150cf1a7d50114>OMOBAA+Times-Roman AddT42Char 
1 0 0 <0002002100000597054b000300070043b40201490506b80156401c000407
4903000a0504490303021a090607490100190809eb214652182b2b4ef43c
4dfd3c4e10f63c4d10fd3c003f3cfd3c10f43cfd3c313033112111271121
11210576b8fbfa054bfab5b803dbfc25>OMOBAA+Times-Roman AddT42Char 
OMOBAA+Times-Roman /CharStrings get begin
/zero 19 def
/one 20 def
/two 21 def
/three 22 def
/four 23 def
/five 24 def
/six 25 def
/eight 27 def
/nine 28 def
end
OMOBAA+Times-Roman /Encoding get
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 56 /eight put
dup 57 /nine put
pop
end
%ADOEndSubsetFont
/GDWIUZ+Times-Roman /OMOBAA+Times-Roman findfont ct_VMDictPut/GDWIUZ+Times-Roman*1 [48{/.notdef}rp /zero /one /two /three /four /five /six /.notdef /eight /nine 198{/.notdef}rp]GDWIUZ+Times-Roman nfGDWIUZ+Times-Roman*1 [23.3172 0 0 -23.3172 0 0 ]msf106.285 395.646 mo(48)[11.6586 0 ]xsh133.823 395.646 mo(49)[11.6586 0 ]xsh161.36 396.136 mo(50)[11.6586 0 ]xsh189.947 396.136 mo(51)[11.6586 0 ]xsh216.692 396.136 mo(52)[11.6586 0 ]xsh244.836 396.136 mo(53)[11.6586 0 ]xsh272.001 396.136 mo(54)[11.6586 0 ]xsh300.028 396.136 mo(55)[11.6586 0 ]xsh327.332 396.136 mo(56)[11.6586 0 ]xsh410.435 396.136 mo(59)[11.6586 0 ]xsh437.972 395.903 mo(60)[11.6586 0 ]xsh466.559 395.903 mo(61)[11.6586 0 ]xsh493.304 395.903 mo(62)[11.6586 0 ]xshgsave
0 0 mo
541 0 li
541 429 li
0 429 li
cp
clp
%ADOBeginSubsetFont: OMOBAA+Times-Roman AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OMOBAA+Times-Roman gcheck setglobal} if

1 0 3 <> OMOBAA+Times-Roman AddT42Char 
1 3164 36 <0003001e000005a50563000200200021013c40aa030f031019031904120f
12101b1f1b202b032b0429063903390439063c1f3c20550a55178c038c04
88088609830d830e830f83108c1f8c209a039a04930d930e930f93109a1f
9a2024440d440e02070808060017161601021818010218191901041b03a7
06101b0f0d1b0e280a211f1b200f20161902180300170e01780108092008
06062c12191901090a0a2912161601061903160a090821050e0119160a06
041820010800022c1718b80155400c094021090803200f0e030823410902
0a000e01c50001014800200003020900222ff41a19fdfd18e6003f3c3c3c
3f3c3c1a4d10fd3cfd3c1139111217390111121739123939870e2e2b057d
10c5870e2e182b057d10c52b1112393912393918111239392f00ed012f10
f500ed012f00ed0110f500ed8710057dc43c87103c07103c3c87100e3c31
3001715d010b0101353e01370133011e01171521353e013534262f01210e
01151417161715010392edeafe634f4f6001ab2801fe333d48fdf75a3414
1255fde8501f2a1a480127020e0234fdccfdf2250966e203edfb7774370a
252508172d0f4c2ac5c9591a34140c0625056300>OMOBAA+Times-Roman AddT42Char 
1 5168 68 <0003004bfff1038903b4000b00400041010c4066ea26fb26020727460602
0c239a0a9a39a90aa90ba80dbc09ca09cb2fcb30dc09dc30da31ec09ed30
0f57082c312a171c1f141f00330f0f010f49322e3639312c0f0a00061408
143325072e3e360b083e3d0b4107413927100b2f412a403179292f2aaf2a
022ab80200400a4318271b442242044440b80201b143422fccf4edf4fde4
10f65d3ce6111239fd3ce42f003f3fed3fed3fed11121739111239762f5d
18edcc111239390111123931304379403b3e3f23280c17010702250d2606
261226010e042600073e041e001524171e0016171326101e012728030c00
260101000e0f053f081e001127141e01002b2b103c103c2b01103c2b103c
2b2b2b2b2b2b2b81818181005d01715d0106070615141716333236352437
362535342726232207061514161514070623222635343633321716151114
17163332363715060706232226270607062322263501024b734b903c2730
4279fe00915c011314226b332e2e0a25151d2d30ada7c24525080d29171e
252025383a443d034c365b52567e017d022a262e59715b2b1c4a396b613c
67556628431a1b2f0c390838160d3b2446997e4584fe6f3a16270e1b3427
1926583d422036795d02ed00>OMOBAA+Times-Roman AddT42Char 
1 5630 69 <00020007ffed03bd057400180025008d402af50c01060c019a0d01230801
da1550001c01902306250723211b06150b0300213e0b071b63110b1e440e
b80202400a272527062f14c0150115b801ffb127262fccf45d3cfde410f6
ed003fed3fed3f123939111239390111123900f5edfc01f5313043794018
1c200c10200c1e26011c101e26011f0d2126011d0f1b2600002b2b012b2b
8181005d01715d13353e0133161511363736333216151400232226351134
2623001633323635342623220615110772b607021a345c7893d0fef2dc6f
d6203a01098a348c877e8d478804f8221a400606fd9f302b4bf8c6d4fed2
582c04213a31fb612dd29595fd5743fe0200>OMOBAA+Times-Roman AddT42Char 
1 5888 72 <00030028ffe8035e03aa0013001c001d00d9405d69086a0c6f126c157b07
79087a0c7d117f127d147d15fc0ef60f0d550866086011c404c712d404e6
09e20f083d08090a171803090a02090a03061739100301034703061c1c63
1d13079206a2060206410d0b1d18fe02421d10cf0a010ab80202b31f03db
10b80201b11f1e2fccf4ed10f65d1239f4ed2f003fed5d3f3ced11123976
2f5d18fd111239390111123911123910c931304379402a0e1b000515251a
261412171e0016171b00181e011918050e03260016111c1e0119011c1e01
040f062600002b2b2b012b103c2b103c2b2b2b8181005d015d001615211e
0133323637170e0123220235341233060706072126272623370262d4fd85
0abe8269903d2329e1a3bccdeebfac3c200e01a60b1b31732d03aac3b3e8
d46e650c7fd8011cb9c901244965365264315849>OMOBAA+Times-Roman AddT42Char 
1 6800 80 <000100210000063403a8004e00fa401c36193420021120a70e024f294f3c
02103b104d1f4e033f372d431c29be01fb002200400101001c003c01fb40
4c22043a001c4e2024243a1c282023373f1c3b2023493a1c4d20230c2005
500b1c0c920f43491b37404948434037362d241b1405040c454e130f3245
3e17323e1f1f170f074e4d3c3b29280a50b80200400b23242f2e8f2dd02d
02482db80147400d464036372f418f40d040024840b80147b74604132749
2f0504b901ff004f2ff43cfde41076f4765d183cfd3c1076f4765d183cfd
3ce6003f3c3c3c3c3c3f3c3c4d10ed10ed11123911121739011112391239
0010f5edfc01f52b2b2b2b2b2b112e015d5d3130005d015d373637363511
34262322060735373e013332161d013e0133321716173637363332171615
111416171521353e0135113427262322070607111416171521353e013511
34272623220607111416171521214e1a28272d15150e4827b20505026390
4c673d20154a375f63a1361f3f52fe3d573715256c41402536395cfe355f
3414216b3d762d3559fe391a07131d5702054a2e040523180d440a0e875a
454626414b243e834aa0fe614733081a1c08365301af612e522b1937fe00
5154031a1a0c448501189a3a624336fddd4c3a011a00>OMOBAA+Times-Roman AddT42Char 
1 7272 81 <00020021000003e303ae0033003400b74059191a4d1a02960ea60e021a08
1f2110321f332f213f2105253f1c2120220343001c3320241c3a1c202023
2e3a1c3220230c20043a0b1c0c900f2e2d251c1304030733120f293e1727
0f07333221200a34073426252f34041b1cb80200b73612272e2f030304b8
01ffb136352fccf43c10fde410f63c1239fd3c2f003f3f3c3c3c3ff4ed11
3911173910f5edfc01f52b2b2b2b055d043130437940102728181a281826
1e01191a2719291e012b01103c2b8181005d71373e013511342726232206
0735363f0132161d013637363332171615111416171521353e0135113426
2322070607111416171521012547390c133b09130e29995e07035c344e54
44386c3a44fe55493a40563b3d22364045fe4b01dc1c09355c01fb401a26
0202230c321f0a0993562031274cc3fe2d4840011c1c0a3d6601ab567128
1735fdd04831021c03ae>OMOBAA+Times-Roman AddT42Char 
1 8202 85 <00010009000002b103af00290088404cc41e013722011f29010343001c29
202424431c2820230b20043f0a1c0b9210221f1e032b2424220403042914
1d1320801d01201d301d021d951d1027170729280a801a011a2b1327242f
0403b801ffb4af2b012b2a2fcc5df43cfde410c45d003f3c3f4de4cced71
5d1239113912173901111217390010f5edfc01f52b2b015d3130005d015d
373e013511342623220607353e0137363732161d013e0133321615140623
222623220615111416371521095c3c25310a211239781732350703407740
33403125264d162366505dfe132108315001c36355050421142a0913180a
10a459643d2e293846713cfe3d5643022100>OMOBAA+Times-Roman AddT42Char 
1 8460 86 <00020068ffed02c903b10031003201034021130013011602290d390d680c
690d790b790c880c0a2908301c31d140011c210000b80191b331d1402db8
0121400f222a181c19d1401b1c211a1f1a011ab80191b319d14015b80121
402b21120d000a082226230d0a04051f3332120705332a0b320f1a01ef1a
ff1a021a4608413200302701273422b801f340100027700fa00fc00f030f
4600340134332fcc5d76d4185de4ed10d45d1239ed76c45d71182f003fed
3f3ced11173901111239123900103d1aec181af4e55d01103d1aed181af4
ed00103d1aec1a18f4e501101a3ded1a18f4ed31304379401c2829202110
1106070629081e012011221e000728051e0021101f1e01002b2b012b2b81
818181005d13331617163332363534262f012e0135343633321633323637
33132326272623220615141f01161514062322262322060723016a211727
46874b57323f707b74a079357f0812100618071f14223e7546508a84d5b1
8f3c980e0c12051a0125013b723d7053422a4e254042865b7090280a0bfe
e9613664563a5c4847749a769628110c03b9>OMOBAA+Times-Roman AddT42Char 
1 9064 88 <00020012ffed03d503aa002b002c00a8404e4b074b1f5a075a1f6d076d1f
79079b079b1f091f0d1f0e021d080a3a1c0e2023263a1c2b202314201050
131c1490191c19261d100a09052b0e0006190b053e210b2c071c270a2f0f
2c2c25100f10b80200b52e00012f2526b801ffb12e2d2fccf43cfd3c10f6
3c1112392f10fde4003f3fed3f3f3c3c1739113910f5edfc01f52b2b3130
437940122224020403260422011e0023240223051e002b01103c2b2b8181
015d005d0111141716333237363711342627352111141637150e01070607
22263d01060706232227263511342726273525013d132563444125263c5a
0143314f37343d1a5805024438555f574d4e22164801ef039efd8044294c
2d192c02244d300521fd404433031c0f0f1409220906a151273c3e3d9002
07501b11071c0c00>OMOBAA+Times-Roman AddT42Char 
OMOBAA+Times-Roman /CharStrings get begin
/space 3 def
/A 36 def
/a 68 def
/b 69 def
/e 72 def
/m 80 def
/n 81 def
/r 85 def
/s 86 def
/u 88 def
end
OMOBAA+Times-Roman /Encoding get
dup 32 /space put
dup 65 /A put
dup 97 /a put
dup 98 /b put
dup 101 /e put
dup 109 /m put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GDWIUZ+Times-Roman*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four /five /six /.notdef /eight /nine 7{/.notdef}rp /A 31{/.notdef}rp /a /b 2{/.notdef}rp /e 7{/.notdef}rp /m /n 3{/.notdef}rp /r /s /.notdef /u 138{/.notdef}rp]GDWIUZ+Times-Roman nfGDWIUZ+Times-Roman*1 [30.8448 0 0 -30.8448 0 0 ]msf221.686 423.615 mo(mass number A)[23.9973 13.6951 11.9988 11.9989 7.71121 15.4224 15.4224 23.9973 15.4224 13.6951 10.2711 7.71121 0 ]xsh1.836 lw
90.7998 373.92 mo
96.9198 373.92 li
@
532.36 373.92 mo
526.24 373.92 li
@
90.7998 368.167 mo
96.9198 368.167 li
@
532.36 368.167 mo
526.24 368.167 li
@
90.7998 362.476 mo
96.9198 362.476 li
@
532.36 362.476 mo
526.24 362.476 li
@
90.7998 356.723 mo
96.9198 356.723 li
@
532.36 356.723 mo
526.24 356.723 li
@
90.7998 350.97 mo
96.9198 350.97 li
@
532.36 350.97 mo
526.24 350.97 li
@
90.7998 339.525 mo
96.9198 339.525 li
@
532.36 339.525 mo
526.24 339.525 li
@
90.7998 333.772 mo
96.9198 333.772 li
@
532.36 333.772 mo
526.24 333.772 li
@
90.7998 328.081 mo
96.9198 328.081 li
@
532.36 328.081 mo
526.24 328.081 li
@
90.7998 322.328 mo
96.9198 322.328 li
@
532.36 322.328 mo
526.24 322.328 li
@
90.7998 316.575 mo
96.9198 316.575 li
@
532.36 316.575 mo
526.24 316.575 li
@
90.7998 310.823 mo
96.9198 310.823 li
@
532.36 310.823 mo
526.24 310.823 li
@
90.7998 305.131 mo
96.9198 305.131 li
@
532.36 305.131 mo
526.24 305.131 li
@
90.7998 299.379 mo
96.9198 299.379 li
@
532.36 299.379 mo
526.24 299.379 li
@
90.7998 293.626 mo
96.9198 293.626 li
@
532.36 293.626 mo
526.24 293.626 li
@
90.7998 282.182 mo
96.9198 282.182 li
@
532.36 282.182 mo
526.24 282.182 li
@
90.7998 276.429 mo
96.9198 276.429 li
@
532.36 276.429 mo
526.24 276.429 li
@
90.7998 270.736 mo
96.9198 270.736 li
@
532.36 270.736 mo
526.24 270.736 li
@
90.7998 264.984 mo
96.9198 264.984 li
@
532.36 264.984 mo
526.24 264.984 li
@
90.7998 259.231 mo
96.9198 259.231 li
@
532.36 259.231 mo
526.24 259.231 li
@
90.7998 253.54 mo
96.9198 253.54 li
@
532.36 253.54 mo
526.24 253.54 li
@
90.7998 247.787 mo
96.9198 247.787 li
@
532.36 247.787 mo
526.24 247.787 li
@
90.7998 242.034 mo
96.9198 242.034 li
@
532.36 242.034 mo
526.24 242.034 li
@
90.7998 236.343 mo
96.9198 236.343 li
@
532.36 236.343 mo
526.24 236.343 li
@
90.7998 224.837 mo
96.9198 224.837 li
@
532.36 224.837 mo
526.24 224.837 li
@
90.7998 219.145 mo
96.9198 219.145 li
@
532.36 219.145 mo
526.24 219.145 li
@
90.7998 213.393 mo
96.9198 213.393 li
@
532.36 213.393 mo
526.24 213.393 li
@
90.7998 207.64 mo
96.9198 207.64 li
@
532.36 207.64 mo
526.24 207.64 li
@
90.7998 201.887 mo
96.9198 201.887 li
@
532.36 201.887 mo
526.24 201.887 li
@
90.7998 196.195 mo
96.9198 196.195 li
@
532.36 196.195 mo
526.24 196.195 li
@
90.7998 190.442 mo
96.9198 190.442 li
@
532.36 190.442 mo
526.24 190.442 li
@
90.7998 184.689 mo
96.9198 184.689 li
@
532.36 184.689 mo
526.24 184.689 li
@
90.7998 178.998 mo
96.9198 178.998 li
@
532.36 178.998 mo
526.24 178.998 li
@
90.7998 167.492 mo
96.9198 167.492 li
@
532.36 167.492 mo
526.24 167.492 li
@
90.7998 161.801 mo
96.9198 161.801 li
@
532.36 161.801 mo
526.24 161.801 li
@
90.7998 156.048 mo
96.9198 156.048 li
@
532.36 156.048 mo
526.24 156.048 li
@
90.7998 150.295 mo
96.9198 150.295 li
@
532.36 150.295 mo
526.24 150.295 li
@
90.7998 144.603 mo
96.9198 144.603 li
@
532.36 144.603 mo
526.24 144.603 li
@
90.7998 138.851 mo
96.9198 138.851 li
@
532.36 138.851 mo
526.24 138.851 li
@
90.7998 133.098 mo
96.9198 133.098 li
@
532.36 133.098 mo
526.24 133.098 li
@
90.7998 127.406 mo
96.9198 127.406 li
@
532.36 127.406 mo
526.24 127.406 li
@
90.7998 121.654 mo
96.9198 121.654 li
@
532.36 121.654 mo
526.24 121.654 li
@
90.7998 110.209 mo
96.9198 110.209 li
@
532.36 110.209 mo
526.24 110.209 li
@
90.7998 104.457 mo
96.9198 104.457 li
@
532.36 104.457 mo
526.24 104.457 li
@
90.7998 98.7036 mo
96.9198 98.7036 li
@
532.36 98.7036 mo
526.24 98.7036 li
@
90.7998 92.9507 mo
96.9198 92.9507 li
@
532.36 92.9507 mo
526.24 92.9507 li
@
90.7998 87.2593 mo
96.9198 87.2593 li
@
532.36 87.2593 mo
526.24 87.2593 li
@
90.7998 81.5063 mo
96.9198 81.5063 li
@
532.36 81.5063 mo
526.24 81.5063 li
@
90.7998 75.7534 mo
96.9198 75.7534 li
@
532.36 75.7534 mo
526.24 75.7534 li
@
90.7998 70.062 mo
96.9198 70.062 li
@
532.36 70.062 mo
526.24 70.062 li
@
90.7998 64.3091 mo
96.9198 64.3091 li
@
532.36 64.3091 mo
526.24 64.3091 li
@
90.7998 52.8647 mo
96.9198 52.8647 li
@
532.36 52.8647 mo
526.24 52.8647 li
@
90.7998 47.1118 mo
96.9198 47.1118 li
@
532.36 47.1118 mo
526.24 47.1118 li
@
90.7998 41.3594 mo
96.9198 41.3594 li
@
532.36 41.3594 mo
526.24 41.3594 li
@
90.7998 35.6675 mo
96.9198 35.6675 li
@
532.36 35.6675 mo
526.24 35.6675 li
@
90.7998 29.915 mo
96.9198 29.915 li
@
532.36 29.915 mo
526.24 29.915 li
@
90.7998 24.1621 mo
96.9198 24.1621 li
@
532.36 24.1621 mo
526.24 24.1621 li
@
90.7998 18.4702 mo
96.9198 18.4702 li
@
532.36 18.4702 mo
526.24 18.4702 li
@
90.7998 12.7178 mo
96.9198 12.7178 li
@
532.36 12.7178 mo
526.24 12.7178 li
@
90.7998 23.7646 mo
96.9198 23.7646 li
@
532.36 23.7646 mo
526.24 23.7646 li
@
90.7998 18.0728 mo
96.9198 18.0728 li
@
532.36 18.0728 mo
526.24 18.0728 li
@
2.754 lw
90.7998 345.278 mo
103.04 345.278 li
@
532.36 345.278 mo
520.12 345.278 li
@
90.7998 287.934 mo
103.04 287.934 li
@
532.36 287.934 mo
520.12 287.934 li
@
90.7998 230.59 mo
103.04 230.59 li
@
532.36 230.59 mo
520.12 230.59 li
@
90.7998 173.245 mo
103.04 173.245 li
@
532.36 173.245 mo
520.12 173.245 li
@
90.7998 115.901 mo
103.04 115.901 li
@
532.36 115.901 mo
520.12 115.901 li
@
90.7998 58.5566 mo
103.04 58.5566 li
@
532.36 58.5566 mo
520.12 58.5566 li
@
90.7998 12.3203 mo
103.04 12.3203 li
@
532.36 12.3203 mo
520.12 12.3203 li
@
grestore
%ADOBeginSubsetFont: OMOBAA+Times-Roman AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OMOBAA+Times-Roman gcheck setglobal} if
1 508 16 <00010050018e0247020e00030020400a003d03011a0500190405b801afb3
218356182b2b4ee410e6002f4ded3130132115215001f7fe09020e80>OMOBAA+Times-Roman AddT42Char 
OMOBAA+Times-Roman /CharStrings get begin
/hyphen 16 def
end
OMOBAA+Times-Roman /Encoding get
dup 45 /hyphen put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GDWIUZ+Times-Roman*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /three /four /five /six /.notdef /eight /nine 7{/.notdef}rp /A 31{/.notdef}rp /a /b 2{/.notdef}rp /e 7{/.notdef}rp /m /n 3{/.notdef}rp /r /s /.notdef /u 138{/.notdef}rp]GDWIUZ+Times-Roman nfGDWIUZ+Times-Roman*1 [28.6416 0 0 -28.6416 0 0 ]msf32.8438 354.826 mo(-500)[9.53744 14.3208 14.3208 0 ]xsh32.8438 297.428 mo(-480)[9.53744 14.3208 14.3208 0 ]xsh32.8438 240.203 mo(-460)[9.53744 14.3208 14.3208 0 ]xsh32.8438 182.747 mo(-440)[9.53744 14.3208 14.3208 0 ]xsh32.8438 125.407 mo(-420)[9.53744 14.3208 14.3208 0 ]xsh32.8438 68.0665 mo(-400)[9.53744 14.3208 14.3208 0 ]xshgsave
0 0 mo
541 0 li
541 429 li
0 429 li
cp
clp
%ADOBeginSubsetFont: OMOBAA+Times-Roman AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OMOBAA+Times-Roman gcheck setglobal} if
1 106 11 <0001005efe93026f056800110045401c0c0d04030d080c1304040c0d0311
0d131317171a04ae084811191213b8010bb3218352182b2b4ef44dfdf44e
456544e6003f3f1239390111123912393900c910c9313012133637170607
06111017121707262702115ed080ae13a145792e51e01a7b8fed035e0107
a162218079d3fea1fefca9fed893213bac011d016b00>OMOBAA+Times-Roman AddT42Char 
1 248 12 <00010036fe93024705680014004a40200902010f100706100706030b0f07
0f06101106131617171a14480bae0f191516b8010bb3214d56182b2b4ef4
4df4fd4e456544e6003f3f12393901111217390010c910c93130005d0002
0706070607273637361110270227371617121102474e4b4f84573b139a47
7e3a51d41a9e88d10163fef6767e6d481d21757ad80163011fb601019321
58b2feeefeac>OMOBAA+Times-Roman AddT42Char 
1 3604 40 <00020017000004c7054b0028002900ca406b652776278527030ec80b1b0f
0a010a7c0e1d981a1b0f1901192d1d0321001b28282404211b0828231498
171b001801182d141d140e03191f24091825270a0324262204130e080f26
af222e280f2e0814132c1d1e1e282908022808292903191874094b0a7400
2650260226b8020ab52b121f290403b80203b12b2a2fccf43cfd3c10f65d
f4f4f43c12392f003f3f3c12392f3cfd3c10ed10eded1112391239111239
3901113939111239111217390010f55d01edec2b2b10f55d01edec0010f5
5d01edec3130015d373e013511342627352113232e012321220615112132
36373311232e01232111141633323637330321011771434272044007341a
68b4feea2d15013b8348163030174882fec54dc0d0c64f395dfbad025c25
0c3974038f6d430826feda88501d28fe374e77fe26774dfe053d165baffe
a6054b00>OMOBAA+Times-Roman AddT42Char 
1 4220 48 <00010017000006e8054b002500bf4069e621010709090b061c190b171c29
0b390b461c561c671cca090b0a090a0b0b2c121b1b1c0a090929121e1e1d
1e1b0a0300070d071b0c0b09080200231703141b161c1d2425051508401c
211d15280c281116281a24281f0828252803090a0b1d1c051a1f1b1a2910
11b80204b5271e1f2c0403b80203b127262fccf43cfd3c10f63cfd3c1112
173910ecec10ec10ed10ecec3d2f1ac81a18003f173cfd173c3f3c3c3cfd
3c111217390507102b04103c0705102b10083c3130015d005d373e013511
3426273521090121150e0115111416171521353e01351101230111141716
171521177f48467c019501da01c5019872424272fdc27c3dfdf41cfdfd31
206ffe1f250d59a203406f430626fbf704092608436dfc71703f0a25250a
45820398fb72045efccfa833210c2500>OMOBAA+Times-Roman AddT42Char 
1 4804 57 <00010021ffe80592054b001f00fd40436a196a1a02171977198619c71ec7
1fd61ed61ffa13fa140909130914191319142813281406080909070a0b0b
090049000907132d18124712090b1411011e1b1f7c1b40b8ff864031091a
19201819192c1209090b1b1a1a29120909071b1a1907041f0b1813091b18
0b0907051a1f131200021a19090f210121b8020ab39b130113b801b9b39b
090109b8014e400d20501f801f02401f01001f011fb9020900202ff45d5d
5d1a19fd5dfd5d18e65d003f3c3f3c3c3c1217390111123939121739874d
2e2b0e7d10c505872e182b0e7d10c52b1a1810f500fd3c3c3c0111123976
2f180110f501111239762f1887100e3c87100e3c313001715d005d011506
07061514161709013e013534272627352115060706070123012e01273502
424d1c312330014001231314331e4501a3411f2f2efe3b1ffe07404d4a05
4b2601091031195a6afd3703043346163b150c022623091a2776fb800466
8f460523>OMOBAA+Times-Roman AddT42Char 
OMOBAA+Times-Roman /CharStrings get begin
/parenleft 11 def
/parenright 12 def
/E 40 def
/M 48 def
/V 57 def
end
OMOBAA+Times-Roman /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 69 /E put
dup 77 /M put
dup 86 /V put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GDWIUZ+Times-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /three /four /five /six /.notdef /eight /nine 7{/.notdef}rp /A 3{/.notdef}rp /E 7{/.notdef}rp /M 8{/.notdef}rp /V 10{/.notdef}rp /a /b 2{/.notdef}rp /e 7{/.notdef}rp /m /n 3{/.notdef}rp /r /s /.notdef /u 138{/.notdef}rp]GDWIUZ+Times-Roman nfGDWIUZ+Times-Roman*1 [0 -30.8448 -30.8448 0 0 0 ]msf27.2148 236.343 mo(E \(MeV\))[-18.8459 -7.7112 -10.2711 -27.4212 -13.6951 -22.27 0 ]ysh.918 lw
90.8 12.32 mo
532.361 12.32 li
532.361 373.92 li
90.8 373.92 li
cp
@
244.844 36.5859 mo
244.844 149.316 li
465.348 149.316 li
465.348 36.5859 li
1 1 1 rgb
f
244.844 149.316 mo
465.348 149.316 li
465.348 36.586 li
244.844 36.586 li
cp
0 0 0 rgb
@
grestore
%ADOBeginSubsetFont: OMOBAA+Times-Roman AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OMOBAA+Times-Roman gcheck setglobal} if
1 404 14 <0001003d00000447040b000b0037401c0199030a31040999070a0d17171a
039901063100079909190c4d52182b4e10f44df43cfd3cf44e456544e600
3f4df43cfd3ce4313001331121152111231121352101fd8c01befe428cfe
4001c0040bfe408cfe4101bf8c00>OMOBAA+Times-Roman AddT42Char 
1 3938 41 <0001001700000461054b002400a9405a0ec80b1b0f0a010a7c0e1d981a1b
0f1901192d1d034a001b24282404211b0828231498171b001801182d141f
211b2328231d140e03191f031f1e2404130e0f2e0814132c1d1e1e230802
2423081918fa094b300a500ad00a030ab8020ab526121f290403b80203b1
26252fccf43cfd3c10f65d4df4f43c003f3c3f12392f3cfd3c10ed391139
1112393901111217392b10f55d01edec2b2b10f55d01edec0010f55d01ed
ec3130373e013511342627352113232e0123212206151121323637331123
2e01232111141617152117793b4272044307391574abfee8291701288348
163030174882fed84574fdc2250d3f8503776d430826feda8d4b1c29fe37
4e77fe26774dfe40713f0925>OMOBAA+Times-Roman AddT42Char 
1 4536 49 <00020017ffe805a8054b0020002100984042d9180158196819dd0bea0eea
15e51c060b0a0a2912191918190b1808190408001310081b21120a021e00
1b1f0818092121031618170a1a0b11280c0b2c1717122816b80204400c23
191f281a2c040928202803b80203b123222fccf4ecec3cfdec3c10f6ec3c
4d10fd3cec11123912391112392f003f3ffc3c3f3c3cfd3c3c1112393911
12393d2f180710052b10043c3130005d015d373e013511272e0127352101
11342726273521150e01151123011114171617152101177f481c2d3f3f01
5f031532217101e1754e23fc7631206ffe1f02ce250d59a2038721351902
26fc2602ada933210a26260c5aa1fbca0463fce2a833210c25054b00>OMOBAA+Times-Roman AddT42Char 
1 6208 73 <00010028000003100576002600774037370a010809190a290a030626033f
001c26de24213f1c25de2303210526131618119518330b011f05391e1d07
060626250a031e20280128b8020440090e1d212f072f030103b901ff0027
2ff45d3cfd3cccf55d3910003f3c3f3c3c3cfd3c3feded11393911123939
2b2b011810c4183130015d005d373e013511233533343736333216151406
2322262f012e01232207061d01331523111416171521286a43abab2b52db
588b30221d2a1d110e26224c1b0ffbf93d81fdeb1c05456f0282439e6dd1
463b2134232c1a151d4b2841ed43fd7e713f091c>OMOBAA+Times-Roman AddT42Char 
OMOBAA+Times-Roman /CharStrings get begin
/plus 14 def
/F 41 def
/N 49 def
/f 73 def
end
OMOBAA+Times-Roman /Encoding get
dup 43 /plus put
dup 70 /F put
dup 78 /N put
dup 102 /f put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GDWIUZ+Times-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /hyphen 2{/.notdef}rp /zero /one /two /three /four /five /six /.notdef /eight /nine 7{/.notdef}rp /A 3{/.notdef}rp /E /F 6{/.notdef}rp /M /N 7{/.notdef}rp /V 10{/.notdef}rp /a /b 2{/.notdef}rp /e /f 6{/.notdef}rp /m /n 3{/.notdef}rp /r /s /.notdef /u 138{/.notdef}rp]GDWIUZ+Times-Roman nfGDWIUZ+Times-Roman*1 [30.4776 0 0 -30.4776 0 0 ]msf303.475 63.3301 mo(NN + 3NF)[22.0048 22.0049 7.61938 17.1892 7.61938 15.2388 22.0049 0 ]xshGDWIUZ+Times-Roman*1 [21.5424 0 0 -21.5424 0 0 ]msf434.258 75.5708 mo(eff)[9.56482 7.17346 0 ]xsh[2.264 6.854 11.444 6.854 ] 0 dsh
256.044 59.23 mo
292.764 59.23 li
1 0 0 rgb
@
252.127 63.147 mo
252.127 55.375 li
259.899 55.375 li
259.899 63.147 li
f
.918 lw
[] 0 dsh
252.127 55.375 mo
259.899 55.375 li
259.899 63.147 li
252.127 63.147 li
cp
@
288.847 63.147 mo
288.847 55.375 li
296.619 55.375 li
296.619 63.147 li
f
288.847 55.375 mo
296.619 55.375 li
296.619 63.147 li
288.847 63.147 li
cp
@
0 0 0 rgb
%ADOBeginSubsetFont: OMOBAA+Times-Roman AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OMOBAA+Times-Roman gcheck setglobal} if
1 6438 76 <000200280000020e0574000b0025005d4026230c0f3f0c1c252024232020
18201050171c18921c201f100f041c25089502001c0725240a27b8020040
0a200b9505271f20dd100fb901ff00262ff43cfd3cf4ed10e6003f3c3f3f
4ded1112173910f5edfc01f510f52b103c31301236333216151406232226
35033e013511342726232206073537363736331615111416171521a83c2c
2b3d3d2b2c3c806b38090f300b15322baf451c08023761fe1a05363e3d2c
2b3d3d2bfb110a357501dd411929040e1f0e391d0c0708fd32723a081c00
>OMOBAA+Times-Roman AddT42Char 
1 7852 83 <00020009fe4203c203b1000c003300c440593609362196199925aa25a527
e427f527080a2505274a2503a62401452401220810430d1c33da242e431c
32de2318201150171c18921b0c0b0a03052e102e29332d1f110c0a05021e
1b083e23071b070263290b33320e054426b80202400a351e272e2f11c010
0110b801ffb135342fccf45d3cfde410f6ed003f3c3fed3f3fed11391117
391112393901111217390010f5edfc01f52b2b3130437940182428030703
280526010724052601042702260006250826012b2b012b2b818101715d00
715d24163332363534262322061511013e01351134262322060735373637
32161d013637363332161514022322272627111416171521016167466c99
9f694a7afec25e3325330b13125f05c4050542325a5f8ac7efb538294036
426ffe117443d7c0b8b65b2cfe09fdab06444903c04c2b0203211f014409
0687422038ebccc8feba0e1538feb9652e082300>OMOBAA+Times-Roman AddT42Char 
1 8868 87 <00010019ffed023b04a100220057402a0911011b22021402391e2206400b
210a47073e0f0b400a210b24401e210022022f141b1840112c1424232fcc
dc1ac81adc3dc41810fdc4cc1ac81a10d61ac81a003ffd76d41a18c81a3f
ccfd3c111239313001005d011523031417163332363717070e0123222726
3511232e01353436373e013732161d010209cc020d18462435221a163474
36762a176d05050918453d710d05039a48fdc04c27452225161e463a6939
65025e0306050a0b14394798040df600>OMOBAA+Times-Roman AddT42Char 
1 9372 91 <00010023000003d50397003b011040b9e707010400040100150016012902
2f02301d36582158225823761687048705b61cb61dc506e627124607480f
481047170436353723350a08060a350617080a0a35161515290617161706
172915282937232915282329153637350a37231539120a293912350a0a35
9606a506b606d60604172f1223062f12233723373735292317150a060832
3a010f12033a1c10113b0300061d2f32031a1c1c3031031b0a37060a1504
3b1111493b352923173b11061b31401b011b3d313c2fc6dcc65d11121739
2f762f1811121739003f173cfc173c3f173cfc173c111217392e2e07052b
102b5d2e2e072b102b0708103c08103c070810c40807103c080710c40710
c40708103c0708103c313001715d005d01150e0115141716173637363534
26273521150e010f01011e0117152135373e0135342726272e0127070e01
151416171521353e013713032e01273501da2635351c2b3b1d312a260142
33581bab010833472efe631d171f261224114317a11d0e1f34fed836342b
e9c03a2c4a03971c01131e13582e43512e4a161a12031c1c042f27f7fe70
4e2e021c1c02021812134120371b6022fb2d1e0a130c071c1c0b223e0153
01235720071c>OMOBAA+Times-Roman AddT42Char 
OMOBAA+Times-Roman /CharStrings get begin
/i 76 def
/p 83 def
/t 87 def
/x 91 def
end
OMOBAA+Times-Roman /Encoding get
dup 105 /i put
dup 112 /p put
dup 116 /t put
dup 120 /x put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GDWIUZ+Times-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /hyphen 2{/.notdef}rp /zero /one /two /three /four /five /six /.notdef /eight /nine 7{/.notdef}rp /A 3{/.notdef}rp /E /F 6{/.notdef}rp /M /N 7{/.notdef}rp /V 10{/.notdef}rp /a /b 2{/.notdef}rp /e /f 2{/.notdef}rp /i 3{/.notdef}rp /m /n /.notdef /p /.notdef /r /s /t /u 2{/.notdef}rp /x 135{/.notdef}rp]GDWIUZ+Times-Roman nfGDWIUZ+Times-Roman*1 [30.4776 0 0 -30.4776 0 0 ]msf303.475 102.805 mo(Experiment)[18.6216 15.2388 15.2388 13.5321 10.1488 8.47278 23.7115 13.5321 15.2388 0 ]xsh2.264 lw
256.044 95.7051 mo
292.764 95.7051 li
@
260.634 95.7051 mo
260.634 93.1961 258.553 91.1151 256.044 91.1151 cv
253.474 91.1151 251.454 93.1961 251.454 95.7051 cv
251.454 98.2141 253.474 100.295 256.044 100.295 cv
258.553 100.295 260.634 98.2141 260.634 95.7051 cv
f
.918 lw
260.634 95.7051 mo
260.634 93.1961 258.553 91.1151 256.044 91.1151 cv
253.474 91.1151 251.454 93.1961 251.454 95.7051 cv
251.454 98.2141 253.474 100.295 256.044 100.295 cv
258.553 100.295 260.634 98.2141 260.634 95.7051 cv
@
297.353 95.7051 mo
297.353 93.1961 295.272 91.1151 292.763 91.1151 cv
290.193 91.1151 288.173 93.1961 288.173 95.7051 cv
288.173 98.2141 290.193 100.295 292.763 100.295 cv
295.272 100.295 297.353 98.2141 297.353 95.7051 cv
f
297.353 95.7051 mo
297.353 93.1961 295.272 91.1151 292.763 91.1151 cv
290.193 91.1151 288.173 93.1961 288.173 95.7051 cv
288.173 98.2141 290.193 100.295 292.763 100.295 cv
295.272 100.295 297.353 98.2141 297.353 95.7051 cv
@
%ADOBeginSubsetFont: OMOBAA+Times-Roman AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OMOBAA+Times-Roman gcheck setglobal} if
1 6648 79 <000100250000020e057c0017004a402015000343001c1720241620120cda
043a0b1c0c901211040304170e0117160a19b80200b411122f0304b901ff
00182ff43cfd3ce6003f3c3f1217394df5edfc01f510f52b103c3130373e
013511342726232206073536373216151114161715212a5d420b143d0e21
1987be07033c5efe1c1c09395303d142192a060621243c0c14fb51573307
1c00>OMOBAA+Times-Roman AddT42Char 
1 7612 82 <00030034ffe103c203aa000b001800190092402cc609e5090296109916a0
10ab16f50a05160014041717550a5410053a0818331902071233080b1915
44190b05b80202b61b0f440f0b010bb80201b11b1a2fccf45ded10f61239
ed2f003fed3f3ced31304379402c00170d250c010f260017031526011109
0f260013071526010e001826011604182601100a12260014061226002b2b
2b2b012b2b2b2b2b8100715d015d1a013332001514022322003500070615
1412333236353402233734fdc7c60104fcc8c0fef601593a64a18f70799a
922502970113fefcd8c7feda011ad5019e345bdfb2fecccea7ad01323c00
>OMOBAA+Times-Roman AddT42Char 
1 9828 92 <0002001cfe4003cb03aa002f003000a2406e5a1901070a1718282a292c4a
09441b4a2c561b682c880a882c982cb92cd72c0e482c01272b0a2c2b0a09
0a0b0b39121819180a090953122c2c2b2c090b1819272b0a082f25021215
032f1c1300062225441c0e3007302c090b1819272b0a3009140080140114
321f8000010032312fccd65dc410c65d111217392f003f3ffdc43f3cfd17
3c111217390705102b103c07102b10083c0810c4c4313001715d005d1321
15060706151416171b013e013534262f013521150e0107010e0123222635
343633321633321235342627012e0127251c01a632182e0a0deabc030d24
1c1f011329290ffec552967338623b2d1a6716387c0604fec022333201dc
03971f01080d260e1d1dfdf9020b08380a1a1802021f1f052e29fcbed8c2
383d28332601042c091a0a02b44a2f072f00>OMOBAA+Times-Roman AddT42Char 
OMOBAA+Times-Roman /CharStrings get begin
/l 79 def
/o 82 def
/y 92 def
end
OMOBAA+Times-Roman /Encoding get
dup 108 /l put
dup 111 /o put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GDWIUZ+Times-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /hyphen 2{/.notdef}rp /zero /one /two /three /four /five /six /.notdef /eight /nine 7{/.notdef}rp /A 3{/.notdef}rp /E /F 6{/.notdef}rp /M /N 7{/.notdef}rp /V 10{/.notdef}rp /a /b 2{/.notdef}rp /e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u 2{/.notdef}rp /x /y 134{/.notdef}rp]GDWIUZ+Times-Roman nfGDWIUZ+Times-Roman*1 [30.4776 0 0 -30.4776 0 0 ]msf303.475 136.525 mo(NN only)[22.0048 22.0049 7.61938 15.2388 15.2388 8.47278 0 ]xsh2.264 lw
[16.034 6.854 ] 0 dsh
256.044 129.426 mo
292.764 129.426 li
0 0 1 rgb
@
256.044 124.836 mo
251.454 129.426 li
256.044 134.017 li
260.572 129.426 li
f
.918 lw
[] 0 dsh
256.044 124.836 mo
251.454 129.426 li
256.044 134.017 li
260.572 129.426 li
256.044 124.836 li
cp
@
292.764 124.836 mo
288.174 129.426 li
292.764 134.017 li
297.293 129.426 li
f
292.764 124.836 mo
288.174 129.426 li
292.764 134.017 li
297.293 129.426 li
292.764 124.836 li
cp
@
2 lw
[4 4 ] 0 dsh
117.424 105.527 mo
145.086 128.294 li
172.749 151.549 li
200.411 172.48 li
228.073 196.838 li
255.737 210.485 li
283.399 230.926 li
311.061 248.92 li
338.723 264.096 li
421.71 275.724 li
449.373 293.963 li
477.035 289.373 li
.294 .718 .286 rgb
@
1 lw
[] 0 dsh
380 319.33 mo
380 277.797 li
0 0 0 rgb
@
380 270.736 mo
384.065 280.685 li
380 278.324 li
375.936 280.685 li
cp
f
%ADOBeginSubsetFont: AVSAAA+MyriadPro-Regular Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /AVSAAA+MyriadPro-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 67 /C putdup 97 /a putdup 101 /e putdup 105 /i putdup 111 /o putdup 112 /p putdup 115 /s putdup 116 /t putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604582 def/StdHW [67] def/StdVW [88] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings10 dict dup begin/space <1C60D8A8C9B896187A> |-/C <1C60D8A8C9B7F7BFE242671C9E817400744FCB1930C8B6D982C0603B0F56B2079EC8B4534AB9C74A497574D9EF71E8F51BC97EB8824D6E23EF8EFAA3DEBE8D568C2956BA1E496299B0678E1779132A604465EA4ECC38726918FAF069884E38826C83426FA3C94ADFC9002199C86D8D> |-/a <1C60D8A8C9B75946039FC5B56ED6A50878B478B1780B40C4125CE8039A261528F027CE6FDEC5783823498623E2545F156FE1817CCA8E4CEF932EAF146EA4E45F8E44AF7B3429BDE6EAD3417E01676A62E7E41175148C72742B2C6CC241FF06B9AE6A99EACBD61DC0A967A1A9EA490A3B86CCCCBA356FE0C46F09ED4CCD9D7FD84EFCB667453A166D73A23A48C3A48DCEEFA9A85E6DA8EDA33C7A566D88393EC5B1BCAE7CEACDFA7D9A043D> |-/e <1C60D8A8C9B7A66F85F3DBE5AE1E76F6A9740420B265CA4AC9DE99AD8AEDC4233110D7344BA8969F49ACBE3164296BAF8D8824063AB5A81F8F9142D2C0492C8D085FBBDD29052840FCC873C574581FB314AC3521D9DA4AE8E6D987C45E9E8106797186054DABC39E6B> |-/i <1C60D8A8C9B88055FF27B3934D040E8DA53B043AB8CFF68E8D519FEAB9D5A4874DC9B90E63751BC12355D9D8276E2A66CDDB9CE6DD75534C5A54C45E2D6E21C6C79BBDA40B7772F2DEC85ADAD3476B> |-/o <1C60D8A8C9B7967683396363C4C5A9E451FFBD75248EC3A8EC4B566E5BD4E7BBB72EB29C672F7BE91209F1171F84980F7DA08B43C90BC9E3BDC65B190F81C7A4B1ED6D074E407F8CF228B147D6A94BC016CC67> |-/p <1C60D8A8C9B7E2CE2B5D9AEC775B38F2FDCA5DD8FB0C9C7D76709EB2E3CEF7455DFF330D234D9132A6F52698D79064F174F1D99AEB0CF9139A6469F8D4BE826FAC77DD18B951C7429F3A77A1434C1A624632AE9545E6FD8A1CFF86A978EB2F9D9C8D213E3AEF1293A1DF353A70DA5E24E2AC4CE8D2656D24B8166AAA778D66777269CA00CCD283376A690AE85A4058A8C9155FC3FA3A08F87D3A4F002FFBBE8C69D79181> |-/s <1C60D8A8C9B70FAD6F31E6985338EEEA1793890FC3B3DC4027B9CC9488D5A6B4D4C4E3E08CED307B2C798C1699A9DD310011666D86920512F1C3EB9CEE4F24B897BB1E950EE111237B9A2BC5BBB8732A07D9407EA3C86D8241785B5209F0AEBA9DE73147EEE82D829B87C7> |-/t <1C60D8A8C9B821B37F30E246C711EE3A9B1905ECA3B2281EC66105C6FB87D8A11F34421A86A4C8EB1634F07587A29F1959067E8F5C01D391C88E6402088837AF0D6E016A2B2057BCC898EDBE8C7509BAF139B3EFB89894D72C8915100CD3D16C57> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/GDWIVA+MyriadPro-Regular /AVSAAA+MyriadPro-Regular findfont ct_VMDictPut/GDWIVA+MyriadPro-Regular*1 [32{/.notdef}rp /space 34{/.notdef}rp /C 29{/.notdef}rp /a 3{/.notdef}rp /e 3{/.notdef}rp /i 5{/.notdef}rp /o /p 2{/.notdef}rp /s /t 139{/.notdef}rp]GDWIVA+MyriadPro-Regular nfGDWIVA+MyriadPro-Regular*1 [36 0 0 -36 0 0 ]msf117.424 340.016 mo(Ca isotopes)[20.6281 17.3518 7.6322 8.42377 14.2559 19.7639 11.6998 19.7639 20.484 18.0363 0 ]xshgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/GDWIVA+MyriadPro-Regular*1 uf/GDWIVA+MyriadPro-Regular uf/AVSAAA+MyriadPro-Regular uf/GDWIUZ+Times-Roman*1 uf/GDWIUZ+Times-Roman uf/OMOBAA+Times-Roman ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
